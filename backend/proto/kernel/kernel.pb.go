// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: kernel.proto

package kernel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SandboxLevel int32

const (
	SandboxLevel_MINIMAL    SandboxLevel = 0
	SandboxLevel_STANDARD   SandboxLevel = 1
	SandboxLevel_PRIVILEGED SandboxLevel = 2
)

// Enum value maps for SandboxLevel.
var (
	SandboxLevel_name = map[int32]string{
		0: "MINIMAL",
		1: "STANDARD",
		2: "PRIVILEGED",
	}
	SandboxLevel_value = map[string]int32{
		"MINIMAL":    0,
		"STANDARD":   1,
		"PRIVILEGED": 2,
	}
)

func (x SandboxLevel) Enum() *SandboxLevel {
	p := new(SandboxLevel)
	*p = x
	return p
}

func (x SandboxLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SandboxLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_proto_enumTypes[0].Descriptor()
}

func (SandboxLevel) Type() protoreflect.EnumType {
	return &file_kernel_proto_enumTypes[0]
}

func (x SandboxLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SandboxLevel.Descriptor instead.
func (SandboxLevel) EnumDescriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{0}
}

type Capability int32

const (
	Capability_READ_FILE       Capability = 0
	Capability_WRITE_FILE      Capability = 1
	Capability_CREATE_FILE     Capability = 2
	Capability_DELETE_FILE     Capability = 3
	Capability_LIST_DIRECTORY  Capability = 4
	Capability_SPAWN_PROCESS   Capability = 5
	Capability_KILL_PROCESS    Capability = 6
	Capability_NETWORK_ACCESS  Capability = 7
	Capability_BIND_PORT       Capability = 8
	Capability_SYSTEM_INFO     Capability = 9
	Capability_TIME_ACCESS     Capability = 10
	Capability_SEND_MESSAGE    Capability = 11
	Capability_RECEIVE_MESSAGE Capability = 12
)

// Enum value maps for Capability.
var (
	Capability_name = map[int32]string{
		0:  "READ_FILE",
		1:  "WRITE_FILE",
		2:  "CREATE_FILE",
		3:  "DELETE_FILE",
		4:  "LIST_DIRECTORY",
		5:  "SPAWN_PROCESS",
		6:  "KILL_PROCESS",
		7:  "NETWORK_ACCESS",
		8:  "BIND_PORT",
		9:  "SYSTEM_INFO",
		10: "TIME_ACCESS",
		11: "SEND_MESSAGE",
		12: "RECEIVE_MESSAGE",
	}
	Capability_value = map[string]int32{
		"READ_FILE":       0,
		"WRITE_FILE":      1,
		"CREATE_FILE":     2,
		"DELETE_FILE":     3,
		"LIST_DIRECTORY":  4,
		"SPAWN_PROCESS":   5,
		"KILL_PROCESS":    6,
		"NETWORK_ACCESS":  7,
		"BIND_PORT":       8,
		"SYSTEM_INFO":     9,
		"TIME_ACCESS":     10,
		"SEND_MESSAGE":    11,
		"RECEIVE_MESSAGE": 12,
	}
)

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_proto_enumTypes[1].Descriptor()
}

func (Capability) Type() protoreflect.EnumType {
	return &file_kernel_proto_enumTypes[1]
}

func (x Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capability.Descriptor instead.
func (Capability) EnumDescriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{1}
}

type AsyncStatusResponse_Status int32

const (
	AsyncStatusResponse_PENDING   AsyncStatusResponse_Status = 0
	AsyncStatusResponse_RUNNING   AsyncStatusResponse_Status = 1
	AsyncStatusResponse_COMPLETED AsyncStatusResponse_Status = 2
	AsyncStatusResponse_FAILED    AsyncStatusResponse_Status = 3
	AsyncStatusResponse_CANCELLED AsyncStatusResponse_Status = 4
)

// Enum value maps for AsyncStatusResponse_Status.
var (
	AsyncStatusResponse_Status_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "FAILED",
		4: "CANCELLED",
	}
	AsyncStatusResponse_Status_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"FAILED":    3,
		"CANCELLED": 4,
	}
)

func (x AsyncStatusResponse_Status) Enum() *AsyncStatusResponse_Status {
	p := new(AsyncStatusResponse_Status)
	*p = x
	return p
}

func (x AsyncStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsyncStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_kernel_proto_enumTypes[2].Descriptor()
}

func (AsyncStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_kernel_proto_enumTypes[2]
}

func (x AsyncStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsyncStatusResponse_Status.Descriptor instead.
func (AsyncStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{129, 0}
}

type SyscallRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Pid   uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Types that are valid to be assigned to Syscall:
	//
	//	*SyscallRequest_ReadFile
	//	*SyscallRequest_WriteFile
	//	*SyscallRequest_CreateFile
	//	*SyscallRequest_DeleteFile
	//	*SyscallRequest_ListDirectory
	//	*SyscallRequest_FileExists
	//	*SyscallRequest_FileStat
	//	*SyscallRequest_MoveFile
	//	*SyscallRequest_CopyFile
	//	*SyscallRequest_CreateDirectory
	//	*SyscallRequest_RemoveDirectory
	//	*SyscallRequest_GetWorkingDirectory
	//	*SyscallRequest_SetWorkingDirectory
	//	*SyscallRequest_TruncateFile
	//	*SyscallRequest_SpawnProcess
	//	*SyscallRequest_KillProcess
	//	*SyscallRequest_GetProcessInfo
	//	*SyscallRequest_GetProcessList
	//	*SyscallRequest_SetProcessPriority
	//	*SyscallRequest_GetProcessState
	//	*SyscallRequest_GetProcessStats
	//	*SyscallRequest_WaitProcess
	//	*SyscallRequest_GetSystemInfo
	//	*SyscallRequest_GetCurrentTime
	//	*SyscallRequest_GetEnvVar
	//	*SyscallRequest_SetEnvVar
	//	*SyscallRequest_Sleep
	//	*SyscallRequest_GetUptime
	//	*SyscallRequest_GetMemoryStats
	//	*SyscallRequest_GetProcessMemoryStats
	//	*SyscallRequest_TriggerGc
	//	*SyscallRequest_SendSignal
	//	*SyscallRequest_NetworkRequest
	//	*SyscallRequest_RegisterSignalHandler
	//	*SyscallRequest_BlockSignal
	//	*SyscallRequest_UnblockSignal
	//	*SyscallRequest_GetPendingSignals
	//	*SyscallRequest_GetSignalStats
	//	*SyscallRequest_WaitForSignal
	//	*SyscallRequest_GetSignalState
	//	*SyscallRequest_Socket
	//	*SyscallRequest_Bind
	//	*SyscallRequest_Listen
	//	*SyscallRequest_Accept
	//	*SyscallRequest_Connect
	//	*SyscallRequest_Send
	//	*SyscallRequest_Recv
	//	*SyscallRequest_SendTo
	//	*SyscallRequest_RecvFrom
	//	*SyscallRequest_CloseSocket
	//	*SyscallRequest_SetSockOpt
	//	*SyscallRequest_GetSockOpt
	//	*SyscallRequest_Open
	//	*SyscallRequest_Close
	//	*SyscallRequest_Dup
	//	*SyscallRequest_Dup2
	//	*SyscallRequest_Lseek
	//	*SyscallRequest_Fcntl
	//	*SyscallRequest_CreatePipe
	//	*SyscallRequest_WritePipe
	//	*SyscallRequest_ReadPipe
	//	*SyscallRequest_ClosePipe
	//	*SyscallRequest_DestroyPipe
	//	*SyscallRequest_PipeStats
	//	*SyscallRequest_CreateShm
	//	*SyscallRequest_AttachShm
	//	*SyscallRequest_DetachShm
	//	*SyscallRequest_WriteShm
	//	*SyscallRequest_ReadShm
	//	*SyscallRequest_DestroyShm
	//	*SyscallRequest_ShmStats
	//	*SyscallRequest_Mmap
	//	*SyscallRequest_MmapRead
	//	*SyscallRequest_MmapWrite
	//	*SyscallRequest_Msync
	//	*SyscallRequest_Munmap
	//	*SyscallRequest_MmapStats
	//	*SyscallRequest_CreateQueue
	//	*SyscallRequest_SendQueue
	//	*SyscallRequest_ReceiveQueue
	//	*SyscallRequest_SubscribeQueue
	//	*SyscallRequest_UnsubscribeQueue
	//	*SyscallRequest_CloseQueue
	//	*SyscallRequest_DestroyQueue
	//	*SyscallRequest_QueueStats
	//	*SyscallRequest_ScheduleNext
	//	*SyscallRequest_YieldProcess
	//	*SyscallRequest_GetCurrentScheduled
	//	*SyscallRequest_GetSchedulerStats
	//	*SyscallRequest_SetSchedulingPolicy
	//	*SyscallRequest_GetSchedulingPolicy
	//	*SyscallRequest_SetTimeQuantum
	//	*SyscallRequest_GetTimeQuantum
	//	*SyscallRequest_GetProcessSchedulerStats
	//	*SyscallRequest_GetAllProcessSchedulerStats
	//	*SyscallRequest_BoostPriority
	//	*SyscallRequest_LowerPriority
	Syscall       isSyscallRequest_Syscall `protobuf_oneof:"syscall"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyscallRequest) Reset() {
	*x = SyscallRequest{}
	mi := &file_kernel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyscallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallRequest) ProtoMessage() {}

func (x *SyscallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallRequest.ProtoReflect.Descriptor instead.
func (*SyscallRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{0}
}

func (x *SyscallRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SyscallRequest) GetSyscall() isSyscallRequest_Syscall {
	if x != nil {
		return x.Syscall
	}
	return nil
}

func (x *SyscallRequest) GetReadFile() *ReadFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ReadFile); ok {
			return x.ReadFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetWriteFile() *WriteFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_WriteFile); ok {
			return x.WriteFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetCreateFile() *CreateFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CreateFile); ok {
			return x.CreateFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetDeleteFile() *DeleteFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_DeleteFile); ok {
			return x.DeleteFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetListDirectory() *ListDirectoryCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ListDirectory); ok {
			return x.ListDirectory
		}
	}
	return nil
}

func (x *SyscallRequest) GetFileExists() *FileExistsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_FileExists); ok {
			return x.FileExists
		}
	}
	return nil
}

func (x *SyscallRequest) GetFileStat() *FileStatCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_FileStat); ok {
			return x.FileStat
		}
	}
	return nil
}

func (x *SyscallRequest) GetMoveFile() *MoveFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_MoveFile); ok {
			return x.MoveFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetCopyFile() *CopyFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CopyFile); ok {
			return x.CopyFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetCreateDirectory() *CreateDirectoryCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CreateDirectory); ok {
			return x.CreateDirectory
		}
	}
	return nil
}

func (x *SyscallRequest) GetRemoveDirectory() *RemoveDirectoryCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_RemoveDirectory); ok {
			return x.RemoveDirectory
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetWorkingDirectory() *GetWorkingDirectoryCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetWorkingDirectory); ok {
			return x.GetWorkingDirectory
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetWorkingDirectory() *SetWorkingDirectoryCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetWorkingDirectory); ok {
			return x.SetWorkingDirectory
		}
	}
	return nil
}

func (x *SyscallRequest) GetTruncateFile() *TruncateFileCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_TruncateFile); ok {
			return x.TruncateFile
		}
	}
	return nil
}

func (x *SyscallRequest) GetSpawnProcess() *SpawnProcessCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SpawnProcess); ok {
			return x.SpawnProcess
		}
	}
	return nil
}

func (x *SyscallRequest) GetKillProcess() *KillProcessCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_KillProcess); ok {
			return x.KillProcess
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessInfo() *GetProcessInfoCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessInfo); ok {
			return x.GetProcessInfo
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessList() *GetProcessListCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessList); ok {
			return x.GetProcessList
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetProcessPriority() *SetProcessPriorityCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetProcessPriority); ok {
			return x.SetProcessPriority
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessState() *GetProcessStateCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessState); ok {
			return x.GetProcessState
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessStats() *GetProcessStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessStats); ok {
			return x.GetProcessStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetWaitProcess() *WaitProcessCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_WaitProcess); ok {
			return x.WaitProcess
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSystemInfo() *GetSystemInfoCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSystemInfo); ok {
			return x.GetSystemInfo
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetCurrentTime() *GetCurrentTimeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetCurrentTime); ok {
			return x.GetCurrentTime
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetEnvVar() *GetEnvVarCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetEnvVar); ok {
			return x.GetEnvVar
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetEnvVar() *SetEnvVarCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetEnvVar); ok {
			return x.SetEnvVar
		}
	}
	return nil
}

func (x *SyscallRequest) GetSleep() *SleepCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Sleep); ok {
			return x.Sleep
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetUptime() *GetUptimeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetUptime); ok {
			return x.GetUptime
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetMemoryStats() *GetMemoryStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetMemoryStats); ok {
			return x.GetMemoryStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessMemoryStats() *GetProcessMemoryStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessMemoryStats); ok {
			return x.GetProcessMemoryStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetTriggerGc() *TriggerGCCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_TriggerGc); ok {
			return x.TriggerGc
		}
	}
	return nil
}

func (x *SyscallRequest) GetSendSignal() *SendSignalCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SendSignal); ok {
			return x.SendSignal
		}
	}
	return nil
}

func (x *SyscallRequest) GetNetworkRequest() *NetworkRequestCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_NetworkRequest); ok {
			return x.NetworkRequest
		}
	}
	return nil
}

func (x *SyscallRequest) GetRegisterSignalHandler() *RegisterSignalHandlerCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_RegisterSignalHandler); ok {
			return x.RegisterSignalHandler
		}
	}
	return nil
}

func (x *SyscallRequest) GetBlockSignal() *BlockSignalCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_BlockSignal); ok {
			return x.BlockSignal
		}
	}
	return nil
}

func (x *SyscallRequest) GetUnblockSignal() *UnblockSignalCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_UnblockSignal); ok {
			return x.UnblockSignal
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetPendingSignals() *GetPendingSignalsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetPendingSignals); ok {
			return x.GetPendingSignals
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSignalStats() *GetSignalStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSignalStats); ok {
			return x.GetSignalStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetWaitForSignal() *WaitForSignalCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_WaitForSignal); ok {
			return x.WaitForSignal
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSignalState() *GetSignalStateCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSignalState); ok {
			return x.GetSignalState
		}
	}
	return nil
}

func (x *SyscallRequest) GetSocket() *SocketCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Socket); ok {
			return x.Socket
		}
	}
	return nil
}

func (x *SyscallRequest) GetBind() *BindCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Bind); ok {
			return x.Bind
		}
	}
	return nil
}

func (x *SyscallRequest) GetListen() *ListenCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Listen); ok {
			return x.Listen
		}
	}
	return nil
}

func (x *SyscallRequest) GetAccept() *AcceptCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Accept); ok {
			return x.Accept
		}
	}
	return nil
}

func (x *SyscallRequest) GetConnect() *ConnectCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *SyscallRequest) GetSend() *SendCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Send); ok {
			return x.Send
		}
	}
	return nil
}

func (x *SyscallRequest) GetRecv() *RecvCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Recv); ok {
			return x.Recv
		}
	}
	return nil
}

func (x *SyscallRequest) GetSendTo() *SendToCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SendTo); ok {
			return x.SendTo
		}
	}
	return nil
}

func (x *SyscallRequest) GetRecvFrom() *RecvFromCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_RecvFrom); ok {
			return x.RecvFrom
		}
	}
	return nil
}

func (x *SyscallRequest) GetCloseSocket() *CloseSocketCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CloseSocket); ok {
			return x.CloseSocket
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetSockOpt() *SetSockOptCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetSockOpt); ok {
			return x.SetSockOpt
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSockOpt() *GetSockOptCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSockOpt); ok {
			return x.GetSockOpt
		}
	}
	return nil
}

func (x *SyscallRequest) GetOpen() *OpenCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Open); ok {
			return x.Open
		}
	}
	return nil
}

func (x *SyscallRequest) GetClose() *CloseCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Close); ok {
			return x.Close
		}
	}
	return nil
}

func (x *SyscallRequest) GetDup() *DupCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Dup); ok {
			return x.Dup
		}
	}
	return nil
}

func (x *SyscallRequest) GetDup2() *Dup2Call {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Dup2); ok {
			return x.Dup2
		}
	}
	return nil
}

func (x *SyscallRequest) GetLseek() *LseekCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Lseek); ok {
			return x.Lseek
		}
	}
	return nil
}

func (x *SyscallRequest) GetFcntl() *FcntlCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Fcntl); ok {
			return x.Fcntl
		}
	}
	return nil
}

func (x *SyscallRequest) GetCreatePipe() *CreatePipeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CreatePipe); ok {
			return x.CreatePipe
		}
	}
	return nil
}

func (x *SyscallRequest) GetWritePipe() *WritePipeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_WritePipe); ok {
			return x.WritePipe
		}
	}
	return nil
}

func (x *SyscallRequest) GetReadPipe() *ReadPipeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ReadPipe); ok {
			return x.ReadPipe
		}
	}
	return nil
}

func (x *SyscallRequest) GetClosePipe() *ClosePipeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ClosePipe); ok {
			return x.ClosePipe
		}
	}
	return nil
}

func (x *SyscallRequest) GetDestroyPipe() *DestroyPipeCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_DestroyPipe); ok {
			return x.DestroyPipe
		}
	}
	return nil
}

func (x *SyscallRequest) GetPipeStats() *PipeStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_PipeStats); ok {
			return x.PipeStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetCreateShm() *CreateShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CreateShm); ok {
			return x.CreateShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetAttachShm() *AttachShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_AttachShm); ok {
			return x.AttachShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetDetachShm() *DetachShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_DetachShm); ok {
			return x.DetachShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetWriteShm() *WriteShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_WriteShm); ok {
			return x.WriteShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetReadShm() *ReadShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ReadShm); ok {
			return x.ReadShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetDestroyShm() *DestroyShmCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_DestroyShm); ok {
			return x.DestroyShm
		}
	}
	return nil
}

func (x *SyscallRequest) GetShmStats() *ShmStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ShmStats); ok {
			return x.ShmStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetMmap() *MmapCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Mmap); ok {
			return x.Mmap
		}
	}
	return nil
}

func (x *SyscallRequest) GetMmapRead() *MmapReadCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_MmapRead); ok {
			return x.MmapRead
		}
	}
	return nil
}

func (x *SyscallRequest) GetMmapWrite() *MmapWriteCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_MmapWrite); ok {
			return x.MmapWrite
		}
	}
	return nil
}

func (x *SyscallRequest) GetMsync() *MsyncCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Msync); ok {
			return x.Msync
		}
	}
	return nil
}

func (x *SyscallRequest) GetMunmap() *MunmapCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_Munmap); ok {
			return x.Munmap
		}
	}
	return nil
}

func (x *SyscallRequest) GetMmapStats() *MmapStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_MmapStats); ok {
			return x.MmapStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetCreateQueue() *CreateQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CreateQueue); ok {
			return x.CreateQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetSendQueue() *SendQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SendQueue); ok {
			return x.SendQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetReceiveQueue() *ReceiveQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ReceiveQueue); ok {
			return x.ReceiveQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetSubscribeQueue() *SubscribeQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SubscribeQueue); ok {
			return x.SubscribeQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetUnsubscribeQueue() *UnsubscribeQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_UnsubscribeQueue); ok {
			return x.UnsubscribeQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetCloseQueue() *CloseQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_CloseQueue); ok {
			return x.CloseQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetDestroyQueue() *DestroyQueueCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_DestroyQueue); ok {
			return x.DestroyQueue
		}
	}
	return nil
}

func (x *SyscallRequest) GetQueueStats() *QueueStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_QueueStats); ok {
			return x.QueueStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetScheduleNext() *ScheduleNextCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_ScheduleNext); ok {
			return x.ScheduleNext
		}
	}
	return nil
}

func (x *SyscallRequest) GetYieldProcess() *YieldProcessCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_YieldProcess); ok {
			return x.YieldProcess
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetCurrentScheduled() *GetCurrentScheduledCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetCurrentScheduled); ok {
			return x.GetCurrentScheduled
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSchedulerStats() *GetSchedulerStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSchedulerStats); ok {
			return x.GetSchedulerStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetSchedulingPolicy() *SetSchedulingPolicyCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetSchedulingPolicy); ok {
			return x.SetSchedulingPolicy
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetSchedulingPolicy() *GetSchedulingPolicyCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetSchedulingPolicy); ok {
			return x.GetSchedulingPolicy
		}
	}
	return nil
}

func (x *SyscallRequest) GetSetTimeQuantum() *SetTimeQuantumCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_SetTimeQuantum); ok {
			return x.SetTimeQuantum
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetTimeQuantum() *GetTimeQuantumCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetTimeQuantum); ok {
			return x.GetTimeQuantum
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetProcessSchedulerStats() *GetProcessSchedulerStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetProcessSchedulerStats); ok {
			return x.GetProcessSchedulerStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetGetAllProcessSchedulerStats() *GetAllProcessSchedulerStatsCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_GetAllProcessSchedulerStats); ok {
			return x.GetAllProcessSchedulerStats
		}
	}
	return nil
}

func (x *SyscallRequest) GetBoostPriority() *BoostPriorityCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_BoostPriority); ok {
			return x.BoostPriority
		}
	}
	return nil
}

func (x *SyscallRequest) GetLowerPriority() *LowerPriorityCall {
	if x != nil {
		if x, ok := x.Syscall.(*SyscallRequest_LowerPriority); ok {
			return x.LowerPriority
		}
	}
	return nil
}

type isSyscallRequest_Syscall interface {
	isSyscallRequest_Syscall()
}

type SyscallRequest_ReadFile struct {
	ReadFile *ReadFileCall `protobuf:"bytes,10,opt,name=read_file,json=readFile,proto3,oneof"`
}

type SyscallRequest_WriteFile struct {
	WriteFile *WriteFileCall `protobuf:"bytes,11,opt,name=write_file,json=writeFile,proto3,oneof"`
}

type SyscallRequest_CreateFile struct {
	CreateFile *CreateFileCall `protobuf:"bytes,12,opt,name=create_file,json=createFile,proto3,oneof"`
}

type SyscallRequest_DeleteFile struct {
	DeleteFile *DeleteFileCall `protobuf:"bytes,13,opt,name=delete_file,json=deleteFile,proto3,oneof"`
}

type SyscallRequest_ListDirectory struct {
	ListDirectory *ListDirectoryCall `protobuf:"bytes,14,opt,name=list_directory,json=listDirectory,proto3,oneof"`
}

type SyscallRequest_FileExists struct {
	FileExists *FileExistsCall `protobuf:"bytes,15,opt,name=file_exists,json=fileExists,proto3,oneof"`
}

type SyscallRequest_FileStat struct {
	FileStat *FileStatCall `protobuf:"bytes,16,opt,name=file_stat,json=fileStat,proto3,oneof"`
}

type SyscallRequest_MoveFile struct {
	MoveFile *MoveFileCall `protobuf:"bytes,17,opt,name=move_file,json=moveFile,proto3,oneof"`
}

type SyscallRequest_CopyFile struct {
	CopyFile *CopyFileCall `protobuf:"bytes,18,opt,name=copy_file,json=copyFile,proto3,oneof"`
}

type SyscallRequest_CreateDirectory struct {
	CreateDirectory *CreateDirectoryCall `protobuf:"bytes,19,opt,name=create_directory,json=createDirectory,proto3,oneof"`
}

type SyscallRequest_RemoveDirectory struct {
	RemoveDirectory *RemoveDirectoryCall `protobuf:"bytes,22,opt,name=remove_directory,json=removeDirectory,proto3,oneof"`
}

type SyscallRequest_GetWorkingDirectory struct {
	GetWorkingDirectory *GetWorkingDirectoryCall `protobuf:"bytes,23,opt,name=get_working_directory,json=getWorkingDirectory,proto3,oneof"`
}

type SyscallRequest_SetWorkingDirectory struct {
	SetWorkingDirectory *SetWorkingDirectoryCall `protobuf:"bytes,24,opt,name=set_working_directory,json=setWorkingDirectory,proto3,oneof"`
}

type SyscallRequest_TruncateFile struct {
	TruncateFile *TruncateFileCall `protobuf:"bytes,25,opt,name=truncate_file,json=truncateFile,proto3,oneof"`
}

type SyscallRequest_SpawnProcess struct {
	SpawnProcess *SpawnProcessCall `protobuf:"bytes,20,opt,name=spawn_process,json=spawnProcess,proto3,oneof"`
}

type SyscallRequest_KillProcess struct {
	KillProcess *KillProcessCall `protobuf:"bytes,21,opt,name=kill_process,json=killProcess,proto3,oneof"`
}

type SyscallRequest_GetProcessInfo struct {
	GetProcessInfo *GetProcessInfoCall `protobuf:"bytes,26,opt,name=get_process_info,json=getProcessInfo,proto3,oneof"`
}

type SyscallRequest_GetProcessList struct {
	GetProcessList *GetProcessListCall `protobuf:"bytes,27,opt,name=get_process_list,json=getProcessList,proto3,oneof"`
}

type SyscallRequest_SetProcessPriority struct {
	SetProcessPriority *SetProcessPriorityCall `protobuf:"bytes,28,opt,name=set_process_priority,json=setProcessPriority,proto3,oneof"`
}

type SyscallRequest_GetProcessState struct {
	GetProcessState *GetProcessStateCall `protobuf:"bytes,29,opt,name=get_process_state,json=getProcessState,proto3,oneof"`
}

type SyscallRequest_GetProcessStats struct {
	GetProcessStats *GetProcessStatsCall `protobuf:"bytes,33,opt,name=get_process_stats,json=getProcessStats,proto3,oneof"`
}

type SyscallRequest_WaitProcess struct {
	WaitProcess *WaitProcessCall `protobuf:"bytes,34,opt,name=wait_process,json=waitProcess,proto3,oneof"`
}

type SyscallRequest_GetSystemInfo struct {
	GetSystemInfo *GetSystemInfoCall `protobuf:"bytes,30,opt,name=get_system_info,json=getSystemInfo,proto3,oneof"`
}

type SyscallRequest_GetCurrentTime struct {
	GetCurrentTime *GetCurrentTimeCall `protobuf:"bytes,31,opt,name=get_current_time,json=getCurrentTime,proto3,oneof"`
}

type SyscallRequest_GetEnvVar struct {
	GetEnvVar *GetEnvVarCall `protobuf:"bytes,32,opt,name=get_env_var,json=getEnvVar,proto3,oneof"`
}

type SyscallRequest_SetEnvVar struct {
	SetEnvVar *SetEnvVarCall `protobuf:"bytes,35,opt,name=set_env_var,json=setEnvVar,proto3,oneof"`
}

type SyscallRequest_Sleep struct {
	Sleep *SleepCall `protobuf:"bytes,36,opt,name=sleep,proto3,oneof"`
}

type SyscallRequest_GetUptime struct {
	GetUptime *GetUptimeCall `protobuf:"bytes,37,opt,name=get_uptime,json=getUptime,proto3,oneof"`
}

type SyscallRequest_GetMemoryStats struct {
	GetMemoryStats *GetMemoryStatsCall `protobuf:"bytes,38,opt,name=get_memory_stats,json=getMemoryStats,proto3,oneof"`
}

type SyscallRequest_GetProcessMemoryStats struct {
	GetProcessMemoryStats *GetProcessMemoryStatsCall `protobuf:"bytes,39,opt,name=get_process_memory_stats,json=getProcessMemoryStats,proto3,oneof"`
}

type SyscallRequest_TriggerGc struct {
	TriggerGc *TriggerGCCall `protobuf:"bytes,41,opt,name=trigger_gc,json=triggerGc,proto3,oneof"`
}

type SyscallRequest_SendSignal struct {
	SendSignal *SendSignalCall `protobuf:"bytes,42,opt,name=send_signal,json=sendSignal,proto3,oneof"`
}

type SyscallRequest_NetworkRequest struct {
	NetworkRequest *NetworkRequestCall `protobuf:"bytes,40,opt,name=network_request,json=networkRequest,proto3,oneof"`
}

type SyscallRequest_RegisterSignalHandler struct {
	// Signal operations
	RegisterSignalHandler *RegisterSignalHandlerCall `protobuf:"bytes,150,opt,name=register_signal_handler,json=registerSignalHandler,proto3,oneof"`
}

type SyscallRequest_BlockSignal struct {
	BlockSignal *BlockSignalCall `protobuf:"bytes,151,opt,name=block_signal,json=blockSignal,proto3,oneof"`
}

type SyscallRequest_UnblockSignal struct {
	UnblockSignal *UnblockSignalCall `protobuf:"bytes,152,opt,name=unblock_signal,json=unblockSignal,proto3,oneof"`
}

type SyscallRequest_GetPendingSignals struct {
	GetPendingSignals *GetPendingSignalsCall `protobuf:"bytes,153,opt,name=get_pending_signals,json=getPendingSignals,proto3,oneof"`
}

type SyscallRequest_GetSignalStats struct {
	GetSignalStats *GetSignalStatsCall `protobuf:"bytes,154,opt,name=get_signal_stats,json=getSignalStats,proto3,oneof"`
}

type SyscallRequest_WaitForSignal struct {
	WaitForSignal *WaitForSignalCall `protobuf:"bytes,155,opt,name=wait_for_signal,json=waitForSignal,proto3,oneof"`
}

type SyscallRequest_GetSignalState struct {
	GetSignalState *GetSignalStateCall `protobuf:"bytes,156,opt,name=get_signal_state,json=getSignalState,proto3,oneof"`
}

type SyscallRequest_Socket struct {
	// Network - Sockets
	Socket *SocketCall `protobuf:"bytes,120,opt,name=socket,proto3,oneof"`
}

type SyscallRequest_Bind struct {
	Bind *BindCall `protobuf:"bytes,121,opt,name=bind,proto3,oneof"`
}

type SyscallRequest_Listen struct {
	Listen *ListenCall `protobuf:"bytes,122,opt,name=listen,proto3,oneof"`
}

type SyscallRequest_Accept struct {
	Accept *AcceptCall `protobuf:"bytes,123,opt,name=accept,proto3,oneof"`
}

type SyscallRequest_Connect struct {
	Connect *ConnectCall `protobuf:"bytes,124,opt,name=connect,proto3,oneof"`
}

type SyscallRequest_Send struct {
	Send *SendCall `protobuf:"bytes,125,opt,name=send,proto3,oneof"`
}

type SyscallRequest_Recv struct {
	Recv *RecvCall `protobuf:"bytes,126,opt,name=recv,proto3,oneof"`
}

type SyscallRequest_SendTo struct {
	SendTo *SendToCall `protobuf:"bytes,127,opt,name=send_to,json=sendTo,proto3,oneof"`
}

type SyscallRequest_RecvFrom struct {
	RecvFrom *RecvFromCall `protobuf:"bytes,128,opt,name=recv_from,json=recvFrom,proto3,oneof"`
}

type SyscallRequest_CloseSocket struct {
	CloseSocket *CloseSocketCall `protobuf:"bytes,129,opt,name=close_socket,json=closeSocket,proto3,oneof"`
}

type SyscallRequest_SetSockOpt struct {
	SetSockOpt *SetSockOptCall `protobuf:"bytes,130,opt,name=set_sock_opt,json=setSockOpt,proto3,oneof"`
}

type SyscallRequest_GetSockOpt struct {
	GetSockOpt *GetSockOptCall `protobuf:"bytes,131,opt,name=get_sock_opt,json=getSockOpt,proto3,oneof"`
}

type SyscallRequest_Open struct {
	// File Descriptors
	Open *OpenCall `protobuf:"bytes,100,opt,name=open,proto3,oneof"`
}

type SyscallRequest_Close struct {
	Close *CloseCall `protobuf:"bytes,101,opt,name=close,proto3,oneof"`
}

type SyscallRequest_Dup struct {
	Dup *DupCall `protobuf:"bytes,102,opt,name=dup,proto3,oneof"`
}

type SyscallRequest_Dup2 struct {
	Dup2 *Dup2Call `protobuf:"bytes,103,opt,name=dup2,proto3,oneof"`
}

type SyscallRequest_Lseek struct {
	Lseek *LseekCall `protobuf:"bytes,104,opt,name=lseek,proto3,oneof"`
}

type SyscallRequest_Fcntl struct {
	Fcntl *FcntlCall `protobuf:"bytes,105,opt,name=fcntl,proto3,oneof"`
}

type SyscallRequest_CreatePipe struct {
	// IPC - Pipes
	CreatePipe *CreatePipeCall `protobuf:"bytes,50,opt,name=create_pipe,json=createPipe,proto3,oneof"`
}

type SyscallRequest_WritePipe struct {
	WritePipe *WritePipeCall `protobuf:"bytes,51,opt,name=write_pipe,json=writePipe,proto3,oneof"`
}

type SyscallRequest_ReadPipe struct {
	ReadPipe *ReadPipeCall `protobuf:"bytes,52,opt,name=read_pipe,json=readPipe,proto3,oneof"`
}

type SyscallRequest_ClosePipe struct {
	ClosePipe *ClosePipeCall `protobuf:"bytes,53,opt,name=close_pipe,json=closePipe,proto3,oneof"`
}

type SyscallRequest_DestroyPipe struct {
	DestroyPipe *DestroyPipeCall `protobuf:"bytes,54,opt,name=destroy_pipe,json=destroyPipe,proto3,oneof"`
}

type SyscallRequest_PipeStats struct {
	PipeStats *PipeStatsCall `protobuf:"bytes,55,opt,name=pipe_stats,json=pipeStats,proto3,oneof"`
}

type SyscallRequest_CreateShm struct {
	// IPC - Shared Memory
	CreateShm *CreateShmCall `protobuf:"bytes,60,opt,name=create_shm,json=createShm,proto3,oneof"`
}

type SyscallRequest_AttachShm struct {
	AttachShm *AttachShmCall `protobuf:"bytes,61,opt,name=attach_shm,json=attachShm,proto3,oneof"`
}

type SyscallRequest_DetachShm struct {
	DetachShm *DetachShmCall `protobuf:"bytes,62,opt,name=detach_shm,json=detachShm,proto3,oneof"`
}

type SyscallRequest_WriteShm struct {
	WriteShm *WriteShmCall `protobuf:"bytes,63,opt,name=write_shm,json=writeShm,proto3,oneof"`
}

type SyscallRequest_ReadShm struct {
	ReadShm *ReadShmCall `protobuf:"bytes,64,opt,name=read_shm,json=readShm,proto3,oneof"`
}

type SyscallRequest_DestroyShm struct {
	DestroyShm *DestroyShmCall `protobuf:"bytes,65,opt,name=destroy_shm,json=destroyShm,proto3,oneof"`
}

type SyscallRequest_ShmStats struct {
	ShmStats *ShmStatsCall `protobuf:"bytes,66,opt,name=shm_stats,json=shmStats,proto3,oneof"`
}

type SyscallRequest_Mmap struct {
	// IPC - Memory-Mapped Files
	Mmap *MmapCall `protobuf:"bytes,67,opt,name=mmap,proto3,oneof"`
}

type SyscallRequest_MmapRead struct {
	MmapRead *MmapReadCall `protobuf:"bytes,68,opt,name=mmap_read,json=mmapRead,proto3,oneof"`
}

type SyscallRequest_MmapWrite struct {
	MmapWrite *MmapWriteCall `protobuf:"bytes,69,opt,name=mmap_write,json=mmapWrite,proto3,oneof"`
}

type SyscallRequest_Msync struct {
	Msync *MsyncCall `protobuf:"bytes,140,opt,name=msync,proto3,oneof"`
}

type SyscallRequest_Munmap struct {
	Munmap *MunmapCall `protobuf:"bytes,141,opt,name=munmap,proto3,oneof"`
}

type SyscallRequest_MmapStats struct {
	MmapStats *MmapStatsCall `protobuf:"bytes,142,opt,name=mmap_stats,json=mmapStats,proto3,oneof"`
}

type SyscallRequest_CreateQueue struct {
	// IPC - Async Queues
	CreateQueue *CreateQueueCall `protobuf:"bytes,110,opt,name=create_queue,json=createQueue,proto3,oneof"`
}

type SyscallRequest_SendQueue struct {
	SendQueue *SendQueueCall `protobuf:"bytes,111,opt,name=send_queue,json=sendQueue,proto3,oneof"`
}

type SyscallRequest_ReceiveQueue struct {
	ReceiveQueue *ReceiveQueueCall `protobuf:"bytes,112,opt,name=receive_queue,json=receiveQueue,proto3,oneof"`
}

type SyscallRequest_SubscribeQueue struct {
	SubscribeQueue *SubscribeQueueCall `protobuf:"bytes,113,opt,name=subscribe_queue,json=subscribeQueue,proto3,oneof"`
}

type SyscallRequest_UnsubscribeQueue struct {
	UnsubscribeQueue *UnsubscribeQueueCall `protobuf:"bytes,114,opt,name=unsubscribe_queue,json=unsubscribeQueue,proto3,oneof"`
}

type SyscallRequest_CloseQueue struct {
	CloseQueue *CloseQueueCall `protobuf:"bytes,115,opt,name=close_queue,json=closeQueue,proto3,oneof"`
}

type SyscallRequest_DestroyQueue struct {
	DestroyQueue *DestroyQueueCall `protobuf:"bytes,116,opt,name=destroy_queue,json=destroyQueue,proto3,oneof"`
}

type SyscallRequest_QueueStats struct {
	QueueStats *QueueStatsCall `protobuf:"bytes,117,opt,name=queue_stats,json=queueStats,proto3,oneof"`
}

type SyscallRequest_ScheduleNext struct {
	// Scheduler
	ScheduleNext *ScheduleNextCall `protobuf:"bytes,70,opt,name=schedule_next,json=scheduleNext,proto3,oneof"`
}

type SyscallRequest_YieldProcess struct {
	YieldProcess *YieldProcessCall `protobuf:"bytes,71,opt,name=yield_process,json=yieldProcess,proto3,oneof"`
}

type SyscallRequest_GetCurrentScheduled struct {
	GetCurrentScheduled *GetCurrentScheduledCall `protobuf:"bytes,72,opt,name=get_current_scheduled,json=getCurrentScheduled,proto3,oneof"`
}

type SyscallRequest_GetSchedulerStats struct {
	GetSchedulerStats *GetSchedulerStatsCall `protobuf:"bytes,73,opt,name=get_scheduler_stats,json=getSchedulerStats,proto3,oneof"`
}

type SyscallRequest_SetSchedulingPolicy struct {
	SetSchedulingPolicy *SetSchedulingPolicyCall `protobuf:"bytes,74,opt,name=set_scheduling_policy,json=setSchedulingPolicy,proto3,oneof"`
}

type SyscallRequest_GetSchedulingPolicy struct {
	GetSchedulingPolicy *GetSchedulingPolicyCall `protobuf:"bytes,75,opt,name=get_scheduling_policy,json=getSchedulingPolicy,proto3,oneof"`
}

type SyscallRequest_SetTimeQuantum struct {
	SetTimeQuantum *SetTimeQuantumCall `protobuf:"bytes,76,opt,name=set_time_quantum,json=setTimeQuantum,proto3,oneof"`
}

type SyscallRequest_GetTimeQuantum struct {
	GetTimeQuantum *GetTimeQuantumCall `protobuf:"bytes,77,opt,name=get_time_quantum,json=getTimeQuantum,proto3,oneof"`
}

type SyscallRequest_GetProcessSchedulerStats struct {
	GetProcessSchedulerStats *GetProcessSchedulerStatsCall `protobuf:"bytes,78,opt,name=get_process_scheduler_stats,json=getProcessSchedulerStats,proto3,oneof"`
}

type SyscallRequest_GetAllProcessSchedulerStats struct {
	GetAllProcessSchedulerStats *GetAllProcessSchedulerStatsCall `protobuf:"bytes,79,opt,name=get_all_process_scheduler_stats,json=getAllProcessSchedulerStats,proto3,oneof"`
}

type SyscallRequest_BoostPriority struct {
	BoostPriority *BoostPriorityCall `protobuf:"bytes,81,opt,name=boost_priority,json=boostPriority,proto3,oneof"`
}

type SyscallRequest_LowerPriority struct {
	LowerPriority *LowerPriorityCall `protobuf:"bytes,82,opt,name=lower_priority,json=lowerPriority,proto3,oneof"`
}

func (*SyscallRequest_ReadFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_WriteFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CreateFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_DeleteFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ListDirectory) isSyscallRequest_Syscall() {}

func (*SyscallRequest_FileExists) isSyscallRequest_Syscall() {}

func (*SyscallRequest_FileStat) isSyscallRequest_Syscall() {}

func (*SyscallRequest_MoveFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CopyFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CreateDirectory) isSyscallRequest_Syscall() {}

func (*SyscallRequest_RemoveDirectory) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetWorkingDirectory) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetWorkingDirectory) isSyscallRequest_Syscall() {}

func (*SyscallRequest_TruncateFile) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SpawnProcess) isSyscallRequest_Syscall() {}

func (*SyscallRequest_KillProcess) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessInfo) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessList) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetProcessPriority) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessState) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_WaitProcess) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSystemInfo) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetCurrentTime) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetEnvVar) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetEnvVar) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Sleep) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetUptime) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetMemoryStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessMemoryStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_TriggerGc) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SendSignal) isSyscallRequest_Syscall() {}

func (*SyscallRequest_NetworkRequest) isSyscallRequest_Syscall() {}

func (*SyscallRequest_RegisterSignalHandler) isSyscallRequest_Syscall() {}

func (*SyscallRequest_BlockSignal) isSyscallRequest_Syscall() {}

func (*SyscallRequest_UnblockSignal) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetPendingSignals) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSignalStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_WaitForSignal) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSignalState) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Socket) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Bind) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Listen) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Accept) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Connect) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Send) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Recv) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SendTo) isSyscallRequest_Syscall() {}

func (*SyscallRequest_RecvFrom) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CloseSocket) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetSockOpt) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSockOpt) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Open) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Close) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Dup) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Dup2) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Lseek) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Fcntl) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CreatePipe) isSyscallRequest_Syscall() {}

func (*SyscallRequest_WritePipe) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ReadPipe) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ClosePipe) isSyscallRequest_Syscall() {}

func (*SyscallRequest_DestroyPipe) isSyscallRequest_Syscall() {}

func (*SyscallRequest_PipeStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CreateShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_AttachShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_DetachShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_WriteShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ReadShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_DestroyShm) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ShmStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Mmap) isSyscallRequest_Syscall() {}

func (*SyscallRequest_MmapRead) isSyscallRequest_Syscall() {}

func (*SyscallRequest_MmapWrite) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Msync) isSyscallRequest_Syscall() {}

func (*SyscallRequest_Munmap) isSyscallRequest_Syscall() {}

func (*SyscallRequest_MmapStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CreateQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SendQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ReceiveQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SubscribeQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_UnsubscribeQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_CloseQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_DestroyQueue) isSyscallRequest_Syscall() {}

func (*SyscallRequest_QueueStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_ScheduleNext) isSyscallRequest_Syscall() {}

func (*SyscallRequest_YieldProcess) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetCurrentScheduled) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSchedulerStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetSchedulingPolicy) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetSchedulingPolicy) isSyscallRequest_Syscall() {}

func (*SyscallRequest_SetTimeQuantum) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetTimeQuantum) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetProcessSchedulerStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_GetAllProcessSchedulerStats) isSyscallRequest_Syscall() {}

func (*SyscallRequest_BoostPriority) isSyscallRequest_Syscall() {}

func (*SyscallRequest_LowerPriority) isSyscallRequest_Syscall() {}

type SyscallResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*SyscallResponse_Success
	//	*SyscallResponse_Error
	//	*SyscallResponse_PermissionDenied
	Result        isSyscallResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyscallResponse) Reset() {
	*x = SyscallResponse{}
	mi := &file_kernel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyscallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallResponse) ProtoMessage() {}

func (x *SyscallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallResponse.ProtoReflect.Descriptor instead.
func (*SyscallResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{1}
}

func (x *SyscallResponse) GetResult() isSyscallResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SyscallResponse) GetSuccess() *SuccessResult {
	if x != nil {
		if x, ok := x.Result.(*SyscallResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *SyscallResponse) GetError() *ErrorResult {
	if x != nil {
		if x, ok := x.Result.(*SyscallResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *SyscallResponse) GetPermissionDenied() *PermissionDeniedResult {
	if x != nil {
		if x, ok := x.Result.(*SyscallResponse_PermissionDenied); ok {
			return x.PermissionDenied
		}
	}
	return nil
}

type isSyscallResponse_Result interface {
	isSyscallResponse_Result()
}

type SyscallResponse_Success struct {
	Success *SuccessResult `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SyscallResponse_Error struct {
	Error *ErrorResult `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type SyscallResponse_PermissionDenied struct {
	PermissionDenied *PermissionDeniedResult `protobuf:"bytes,3,opt,name=permission_denied,json=permissionDenied,proto3,oneof"`
}

func (*SyscallResponse_Success) isSyscallResponse_Result() {}

func (*SyscallResponse_Error) isSyscallResponse_Result() {}

func (*SyscallResponse_PermissionDenied) isSyscallResponse_Result() {}

type SuccessResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuccessResult) Reset() {
	*x = SuccessResult{}
	mi := &file_kernel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResult) ProtoMessage() {}

func (x *SuccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResult.ProtoReflect.Descriptor instead.
func (*SuccessResult) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{2}
}

func (x *SuccessResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ErrorResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResult) Reset() {
	*x = ErrorResult{}
	mi := &file_kernel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResult) ProtoMessage() {}

func (x *ErrorResult) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResult.ProtoReflect.Descriptor instead.
func (*ErrorResult) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PermissionDeniedResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionDeniedResult) Reset() {
	*x = PermissionDeniedResult{}
	mi := &file_kernel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionDeniedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionDeniedResult) ProtoMessage() {}

func (x *PermissionDeniedResult) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionDeniedResult.ProtoReflect.Descriptor instead.
func (*PermissionDeniedResult) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{4}
}

func (x *PermissionDeniedResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ReadFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileCall) Reset() {
	*x = ReadFileCall{}
	mi := &file_kernel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileCall) ProtoMessage() {}

func (x *ReadFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileCall.ProtoReflect.Descriptor instead.
func (*ReadFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{5}
}

func (x *ReadFileCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type WriteFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileCall) Reset() {
	*x = WriteFileCall{}
	mi := &file_kernel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileCall) ProtoMessage() {}

func (x *WriteFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileCall.ProtoReflect.Descriptor instead.
func (*WriteFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{6}
}

func (x *WriteFileCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteFileCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileCall) Reset() {
	*x = CreateFileCall{}
	mi := &file_kernel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileCall) ProtoMessage() {}

func (x *CreateFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileCall.ProtoReflect.Descriptor instead.
func (*CreateFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFileCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileCall) Reset() {
	*x = DeleteFileCall{}
	mi := &file_kernel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileCall) ProtoMessage() {}

func (x *DeleteFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileCall.ProtoReflect.Descriptor instead.
func (*DeleteFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFileCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListDirectoryCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDirectoryCall) Reset() {
	*x = ListDirectoryCall{}
	mi := &file_kernel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDirectoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryCall) ProtoMessage() {}

func (x *ListDirectoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryCall.ProtoReflect.Descriptor instead.
func (*ListDirectoryCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{9}
}

func (x *ListDirectoryCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileExistsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileExistsCall) Reset() {
	*x = FileExistsCall{}
	mi := &file_kernel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileExistsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileExistsCall) ProtoMessage() {}

func (x *FileExistsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileExistsCall.ProtoReflect.Descriptor instead.
func (*FileExistsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{10}
}

func (x *FileExistsCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileStatCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileStatCall) Reset() {
	*x = FileStatCall{}
	mi := &file_kernel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStatCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStatCall) ProtoMessage() {}

func (x *FileStatCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStatCall.ProtoReflect.Descriptor instead.
func (*FileStatCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{11}
}

func (x *FileStatCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MoveFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveFileCall) Reset() {
	*x = MoveFileCall{}
	mi := &file_kernel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFileCall) ProtoMessage() {}

func (x *MoveFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFileCall.ProtoReflect.Descriptor instead.
func (*MoveFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{12}
}

func (x *MoveFileCall) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MoveFileCall) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type CopyFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyFileCall) Reset() {
	*x = CopyFileCall{}
	mi := &file_kernel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileCall) ProtoMessage() {}

func (x *CopyFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileCall.ProtoReflect.Descriptor instead.
func (*CopyFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{13}
}

func (x *CopyFileCall) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CopyFileCall) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type CreateDirectoryCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectoryCall) Reset() {
	*x = CreateDirectoryCall{}
	mi := &file_kernel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryCall) ProtoMessage() {}

func (x *CreateDirectoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryCall.ProtoReflect.Descriptor instead.
func (*CreateDirectoryCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{14}
}

func (x *CreateDirectoryCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveDirectoryCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDirectoryCall) Reset() {
	*x = RemoveDirectoryCall{}
	mi := &file_kernel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDirectoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirectoryCall) ProtoMessage() {}

func (x *RemoveDirectoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirectoryCall.ProtoReflect.Descriptor instead.
func (*RemoveDirectoryCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveDirectoryCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetWorkingDirectoryCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkingDirectoryCall) Reset() {
	*x = GetWorkingDirectoryCall{}
	mi := &file_kernel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkingDirectoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkingDirectoryCall) ProtoMessage() {}

func (x *GetWorkingDirectoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkingDirectoryCall.ProtoReflect.Descriptor instead.
func (*GetWorkingDirectoryCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{16}
}

type SetWorkingDirectoryCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWorkingDirectoryCall) Reset() {
	*x = SetWorkingDirectoryCall{}
	mi := &file_kernel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWorkingDirectoryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWorkingDirectoryCall) ProtoMessage() {}

func (x *SetWorkingDirectoryCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWorkingDirectoryCall.ProtoReflect.Descriptor instead.
func (*SetWorkingDirectoryCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{17}
}

func (x *SetWorkingDirectoryCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TruncateFileCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TruncateFileCall) Reset() {
	*x = TruncateFileCall{}
	mi := &file_kernel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncateFileCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateFileCall) ProtoMessage() {}

func (x *TruncateFileCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateFileCall.ProtoReflect.Descriptor instead.
func (*TruncateFileCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{18}
}

func (x *TruncateFileCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TruncateFileCall) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SpawnProcessCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpawnProcessCall) Reset() {
	*x = SpawnProcessCall{}
	mi := &file_kernel_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnProcessCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnProcessCall) ProtoMessage() {}

func (x *SpawnProcessCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnProcessCall.ProtoReflect.Descriptor instead.
func (*SpawnProcessCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{19}
}

func (x *SpawnProcessCall) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SpawnProcessCall) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type KillProcessCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KillProcessCall) Reset() {
	*x = KillProcessCall{}
	mi := &file_kernel_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillProcessCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillProcessCall) ProtoMessage() {}

func (x *KillProcessCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillProcessCall.ProtoReflect.Descriptor instead.
func (*KillProcessCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{20}
}

func (x *KillProcessCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type GetProcessInfoCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessInfoCall) Reset() {
	*x = GetProcessInfoCall{}
	mi := &file_kernel_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessInfoCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessInfoCall) ProtoMessage() {}

func (x *GetProcessInfoCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessInfoCall.ProtoReflect.Descriptor instead.
func (*GetProcessInfoCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{21}
}

func (x *GetProcessInfoCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type GetProcessListCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessListCall) Reset() {
	*x = GetProcessListCall{}
	mi := &file_kernel_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessListCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessListCall) ProtoMessage() {}

func (x *GetProcessListCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessListCall.ProtoReflect.Descriptor instead.
func (*GetProcessListCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{22}
}

type SetProcessPriorityCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	Priority      uint32                 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetProcessPriorityCall) Reset() {
	*x = SetProcessPriorityCall{}
	mi := &file_kernel_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetProcessPriorityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProcessPriorityCall) ProtoMessage() {}

func (x *SetProcessPriorityCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProcessPriorityCall.ProtoReflect.Descriptor instead.
func (*SetProcessPriorityCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{23}
}

func (x *SetProcessPriorityCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

func (x *SetProcessPriorityCall) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type GetProcessStateCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessStateCall) Reset() {
	*x = GetProcessStateCall{}
	mi := &file_kernel_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessStateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessStateCall) ProtoMessage() {}

func (x *GetProcessStateCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessStateCall.ProtoReflect.Descriptor instead.
func (*GetProcessStateCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{24}
}

func (x *GetProcessStateCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type GetProcessStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessStatsCall) Reset() {
	*x = GetProcessStatsCall{}
	mi := &file_kernel_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessStatsCall) ProtoMessage() {}

func (x *GetProcessStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessStatsCall.ProtoReflect.Descriptor instead.
func (*GetProcessStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{25}
}

func (x *GetProcessStatsCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type WaitProcessCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	TimeoutMs     *uint64                `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitProcessCall) Reset() {
	*x = WaitProcessCall{}
	mi := &file_kernel_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitProcessCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitProcessCall) ProtoMessage() {}

func (x *WaitProcessCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitProcessCall.ProtoReflect.Descriptor instead.
func (*WaitProcessCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{26}
}

func (x *WaitProcessCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

func (x *WaitProcessCall) GetTimeoutMs() uint64 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type GetSystemInfoCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSystemInfoCall) Reset() {
	*x = GetSystemInfoCall{}
	mi := &file_kernel_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemInfoCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoCall) ProtoMessage() {}

func (x *GetSystemInfoCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoCall.ProtoReflect.Descriptor instead.
func (*GetSystemInfoCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{27}
}

type GetCurrentTimeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentTimeCall) Reset() {
	*x = GetCurrentTimeCall{}
	mi := &file_kernel_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentTimeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimeCall) ProtoMessage() {}

func (x *GetCurrentTimeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimeCall.ProtoReflect.Descriptor instead.
func (*GetCurrentTimeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{28}
}

type GetEnvVarCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnvVarCall) Reset() {
	*x = GetEnvVarCall{}
	mi := &file_kernel_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvVarCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvVarCall) ProtoMessage() {}

func (x *GetEnvVarCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvVarCall.ProtoReflect.Descriptor instead.
func (*GetEnvVarCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{29}
}

func (x *GetEnvVarCall) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SetEnvVarCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetEnvVarCall) Reset() {
	*x = SetEnvVarCall{}
	mi := &file_kernel_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEnvVarCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnvVarCall) ProtoMessage() {}

func (x *SetEnvVarCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnvVarCall.ProtoReflect.Descriptor instead.
func (*SetEnvVarCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{30}
}

func (x *SetEnvVarCall) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetEnvVarCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SleepCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DurationMs    uint64                 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepCall) Reset() {
	*x = SleepCall{}
	mi := &file_kernel_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepCall) ProtoMessage() {}

func (x *SleepCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepCall.ProtoReflect.Descriptor instead.
func (*SleepCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{31}
}

func (x *SleepCall) GetDurationMs() uint64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type GetUptimeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUptimeCall) Reset() {
	*x = GetUptimeCall{}
	mi := &file_kernel_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUptimeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUptimeCall) ProtoMessage() {}

func (x *GetUptimeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUptimeCall.ProtoReflect.Descriptor instead.
func (*GetUptimeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{32}
}

type GetMemoryStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatsCall) Reset() {
	*x = GetMemoryStatsCall{}
	mi := &file_kernel_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatsCall) ProtoMessage() {}

func (x *GetMemoryStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatsCall.ProtoReflect.Descriptor instead.
func (*GetMemoryStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{33}
}

type GetProcessMemoryStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessMemoryStatsCall) Reset() {
	*x = GetProcessMemoryStatsCall{}
	mi := &file_kernel_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessMemoryStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessMemoryStatsCall) ProtoMessage() {}

func (x *GetProcessMemoryStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessMemoryStatsCall.ProtoReflect.Descriptor instead.
func (*GetProcessMemoryStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{34}
}

func (x *GetProcessMemoryStatsCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type TriggerGCCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     *uint32                `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3,oneof" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerGCCall) Reset() {
	*x = TriggerGCCall{}
	mi := &file_kernel_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerGCCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerGCCall) ProtoMessage() {}

func (x *TriggerGCCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerGCCall.ProtoReflect.Descriptor instead.
func (*TriggerGCCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{35}
}

func (x *TriggerGCCall) GetTargetPid() uint32 {
	if x != nil && x.TargetPid != nil {
		return *x.TargetPid
	}
	return 0
}

type SendSignalCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	Signal        uint32                 `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendSignalCall) Reset() {
	*x = SendSignalCall{}
	mi := &file_kernel_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSignalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignalCall) ProtoMessage() {}

func (x *SendSignalCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignalCall.ProtoReflect.Descriptor instead.
func (*SendSignalCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{36}
}

func (x *SendSignalCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

func (x *SendSignalCall) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type RegisterSignalHandlerCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signal        uint32                 `protobuf:"varint,1,opt,name=signal,proto3" json:"signal,omitempty"`
	HandlerId     uint32                 `protobuf:"varint,2,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"` // Handler identifier
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterSignalHandlerCall) Reset() {
	*x = RegisterSignalHandlerCall{}
	mi := &file_kernel_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterSignalHandlerCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSignalHandlerCall) ProtoMessage() {}

func (x *RegisterSignalHandlerCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSignalHandlerCall.ProtoReflect.Descriptor instead.
func (*RegisterSignalHandlerCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{37}
}

func (x *RegisterSignalHandlerCall) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *RegisterSignalHandlerCall) GetHandlerId() uint32 {
	if x != nil {
		return x.HandlerId
	}
	return 0
}

type BlockSignalCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signal        uint32                 `protobuf:"varint,1,opt,name=signal,proto3" json:"signal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockSignalCall) Reset() {
	*x = BlockSignalCall{}
	mi := &file_kernel_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockSignalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSignalCall) ProtoMessage() {}

func (x *BlockSignalCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSignalCall.ProtoReflect.Descriptor instead.
func (*BlockSignalCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{38}
}

func (x *BlockSignalCall) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type UnblockSignalCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signal        uint32                 `protobuf:"varint,1,opt,name=signal,proto3" json:"signal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockSignalCall) Reset() {
	*x = UnblockSignalCall{}
	mi := &file_kernel_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockSignalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockSignalCall) ProtoMessage() {}

func (x *UnblockSignalCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockSignalCall.ProtoReflect.Descriptor instead.
func (*UnblockSignalCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{39}
}

func (x *UnblockSignalCall) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type GetPendingSignalsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPendingSignalsCall) Reset() {
	*x = GetPendingSignalsCall{}
	mi := &file_kernel_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPendingSignalsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingSignalsCall) ProtoMessage() {}

func (x *GetPendingSignalsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingSignalsCall.ProtoReflect.Descriptor instead.
func (*GetPendingSignalsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{40}
}

type GetSignalStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignalStatsCall) Reset() {
	*x = GetSignalStatsCall{}
	mi := &file_kernel_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalStatsCall) ProtoMessage() {}

func (x *GetSignalStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalStatsCall.ProtoReflect.Descriptor instead.
func (*GetSignalStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{41}
}

type WaitForSignalCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signals       []uint32               `protobuf:"varint,1,rep,packed,name=signals,proto3" json:"signals,omitempty"`
	TimeoutMs     *uint64                `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForSignalCall) Reset() {
	*x = WaitForSignalCall{}
	mi := &file_kernel_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForSignalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForSignalCall) ProtoMessage() {}

func (x *WaitForSignalCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForSignalCall.ProtoReflect.Descriptor instead.
func (*WaitForSignalCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{42}
}

func (x *WaitForSignalCall) GetSignals() []uint32 {
	if x != nil {
		return x.Signals
	}
	return nil
}

func (x *WaitForSignalCall) GetTimeoutMs() uint64 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type GetSignalStateCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     *uint32                `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3,oneof" json:"target_pid,omitempty"` // If not provided, returns current process state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignalStateCall) Reset() {
	*x = GetSignalStateCall{}
	mi := &file_kernel_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignalStateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignalStateCall) ProtoMessage() {}

func (x *GetSignalStateCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignalStateCall.ProtoReflect.Descriptor instead.
func (*GetSignalStateCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{43}
}

func (x *GetSignalStateCall) GetTargetPid() uint32 {
	if x != nil && x.TargetPid != nil {
		return *x.TargetPid
	}
	return 0
}

type NetworkRequestCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkRequestCall) Reset() {
	*x = NetworkRequestCall{}
	mi := &file_kernel_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkRequestCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRequestCall) ProtoMessage() {}

func (x *NetworkRequestCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRequestCall.ProtoReflect.Descriptor instead.
func (*NetworkRequestCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{44}
}

func (x *NetworkRequestCall) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SocketCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        uint32                 `protobuf:"varint,1,opt,name=domain,proto3" json:"domain,omitempty"`
	SocketType    uint32                 `protobuf:"varint,2,opt,name=socket_type,json=socketType,proto3" json:"socket_type,omitempty"`
	Protocol      uint32                 `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketCall) Reset() {
	*x = SocketCall{}
	mi := &file_kernel_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketCall) ProtoMessage() {}

func (x *SocketCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketCall.ProtoReflect.Descriptor instead.
func (*SocketCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{45}
}

func (x *SocketCall) GetDomain() uint32 {
	if x != nil {
		return x.Domain
	}
	return 0
}

func (x *SocketCall) GetSocketType() uint32 {
	if x != nil {
		return x.SocketType
	}
	return 0
}

func (x *SocketCall) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type BindCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindCall) Reset() {
	*x = BindCall{}
	mi := &file_kernel_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCall) ProtoMessage() {}

func (x *BindCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCall.ProtoReflect.Descriptor instead.
func (*BindCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{46}
}

func (x *BindCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *BindCall) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListenCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Backlog       uint32                 `protobuf:"varint,2,opt,name=backlog,proto3" json:"backlog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenCall) Reset() {
	*x = ListenCall{}
	mi := &file_kernel_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenCall) ProtoMessage() {}

func (x *ListenCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenCall.ProtoReflect.Descriptor instead.
func (*ListenCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{47}
}

func (x *ListenCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *ListenCall) GetBacklog() uint32 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

type AcceptCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptCall) Reset() {
	*x = AcceptCall{}
	mi := &file_kernel_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptCall) ProtoMessage() {}

func (x *AcceptCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptCall.ProtoReflect.Descriptor instead.
func (*AcceptCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{48}
}

func (x *AcceptCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

type ConnectCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectCall) Reset() {
	*x = ConnectCall{}
	mi := &file_kernel_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectCall) ProtoMessage() {}

func (x *ConnectCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectCall.ProtoReflect.Descriptor instead.
func (*ConnectCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{49}
}

func (x *ConnectCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *ConnectCall) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SendCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Flags         uint32                 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCall) Reset() {
	*x = SendCall{}
	mi := &file_kernel_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCall) ProtoMessage() {}

func (x *SendCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCall.ProtoReflect.Descriptor instead.
func (*SendCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{50}
}

func (x *SendCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *SendCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendCall) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type RecvCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Size          uint32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Flags         uint32                 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecvCall) Reset() {
	*x = RecvCall{}
	mi := &file_kernel_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecvCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvCall) ProtoMessage() {}

func (x *RecvCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvCall.ProtoReflect.Descriptor instead.
func (*RecvCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{51}
}

func (x *RecvCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *RecvCall) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RecvCall) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type SendToCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Flags         uint32                 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendToCall) Reset() {
	*x = SendToCall{}
	mi := &file_kernel_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendToCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendToCall) ProtoMessage() {}

func (x *SendToCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendToCall.ProtoReflect.Descriptor instead.
func (*SendToCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{52}
}

func (x *SendToCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *SendToCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendToCall) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SendToCall) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type RecvFromCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Size          uint32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Flags         uint32                 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecvFromCall) Reset() {
	*x = RecvFromCall{}
	mi := &file_kernel_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecvFromCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvFromCall) ProtoMessage() {}

func (x *RecvFromCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvFromCall.ProtoReflect.Descriptor instead.
func (*RecvFromCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{53}
}

func (x *RecvFromCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *RecvFromCall) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RecvFromCall) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type CloseSocketCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseSocketCall) Reset() {
	*x = CloseSocketCall{}
	mi := &file_kernel_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseSocketCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSocketCall) ProtoMessage() {}

func (x *CloseSocketCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSocketCall.ProtoReflect.Descriptor instead.
func (*CloseSocketCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{54}
}

func (x *CloseSocketCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

type SetSockOptCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Level         uint32                 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Optname       uint32                 `protobuf:"varint,3,opt,name=optname,proto3" json:"optname,omitempty"`
	Optval        []byte                 `protobuf:"bytes,4,opt,name=optval,proto3" json:"optval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSockOptCall) Reset() {
	*x = SetSockOptCall{}
	mi := &file_kernel_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSockOptCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSockOptCall) ProtoMessage() {}

func (x *SetSockOptCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSockOptCall.ProtoReflect.Descriptor instead.
func (*SetSockOptCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{55}
}

func (x *SetSockOptCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *SetSockOptCall) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SetSockOptCall) GetOptname() uint32 {
	if x != nil {
		return x.Optname
	}
	return 0
}

func (x *SetSockOptCall) GetOptval() []byte {
	if x != nil {
		return x.Optval
	}
	return nil
}

type GetSockOptCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sockfd        uint32                 `protobuf:"varint,1,opt,name=sockfd,proto3" json:"sockfd,omitempty"`
	Level         uint32                 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Optname       uint32                 `protobuf:"varint,3,opt,name=optname,proto3" json:"optname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSockOptCall) Reset() {
	*x = GetSockOptCall{}
	mi := &file_kernel_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSockOptCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSockOptCall) ProtoMessage() {}

func (x *GetSockOptCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSockOptCall.ProtoReflect.Descriptor instead.
func (*GetSockOptCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{56}
}

func (x *GetSockOptCall) GetSockfd() uint32 {
	if x != nil {
		return x.Sockfd
	}
	return 0
}

func (x *GetSockOptCall) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetSockOptCall) GetOptname() uint32 {
	if x != nil {
		return x.Optname
	}
	return 0
}

type OpenCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Flags         uint32                 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Mode          uint32                 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenCall) Reset() {
	*x = OpenCall{}
	mi := &file_kernel_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCall) ProtoMessage() {}

func (x *OpenCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCall.ProtoReflect.Descriptor instead.
func (*OpenCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{57}
}

func (x *OpenCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenCall) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *OpenCall) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type CloseCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fd            uint32                 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseCall) Reset() {
	*x = CloseCall{}
	mi := &file_kernel_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseCall) ProtoMessage() {}

func (x *CloseCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseCall.ProtoReflect.Descriptor instead.
func (*CloseCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{58}
}

func (x *CloseCall) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

type DupCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fd            uint32                 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DupCall) Reset() {
	*x = DupCall{}
	mi := &file_kernel_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DupCall) ProtoMessage() {}

func (x *DupCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DupCall.ProtoReflect.Descriptor instead.
func (*DupCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{59}
}

func (x *DupCall) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

type Dup2Call struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oldfd         uint32                 `protobuf:"varint,1,opt,name=oldfd,proto3" json:"oldfd,omitempty"`
	Newfd         uint32                 `protobuf:"varint,2,opt,name=newfd,proto3" json:"newfd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dup2Call) Reset() {
	*x = Dup2Call{}
	mi := &file_kernel_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dup2Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dup2Call) ProtoMessage() {}

func (x *Dup2Call) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dup2Call.ProtoReflect.Descriptor instead.
func (*Dup2Call) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{60}
}

func (x *Dup2Call) GetOldfd() uint32 {
	if x != nil {
		return x.Oldfd
	}
	return 0
}

func (x *Dup2Call) GetNewfd() uint32 {
	if x != nil {
		return x.Newfd
	}
	return 0
}

type LseekCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fd            uint32                 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Whence        uint32                 `protobuf:"varint,3,opt,name=whence,proto3" json:"whence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LseekCall) Reset() {
	*x = LseekCall{}
	mi := &file_kernel_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LseekCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LseekCall) ProtoMessage() {}

func (x *LseekCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LseekCall.ProtoReflect.Descriptor instead.
func (*LseekCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{61}
}

func (x *LseekCall) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *LseekCall) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LseekCall) GetWhence() uint32 {
	if x != nil {
		return x.Whence
	}
	return 0
}

type FcntlCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fd            uint32                 `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Cmd           uint32                 `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Arg           uint32                 `protobuf:"varint,3,opt,name=arg,proto3" json:"arg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FcntlCall) Reset() {
	*x = FcntlCall{}
	mi := &file_kernel_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FcntlCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FcntlCall) ProtoMessage() {}

func (x *FcntlCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FcntlCall.ProtoReflect.Descriptor instead.
func (*FcntlCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{62}
}

func (x *FcntlCall) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *FcntlCall) GetCmd() uint32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *FcntlCall) GetArg() uint32 {
	if x != nil {
		return x.Arg
	}
	return 0
}

type CreatePipeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReaderPid     uint32                 `protobuf:"varint,1,opt,name=reader_pid,json=readerPid,proto3" json:"reader_pid,omitempty"`
	WriterPid     uint32                 `protobuf:"varint,2,opt,name=writer_pid,json=writerPid,proto3" json:"writer_pid,omitempty"`
	Capacity      *uint32                `protobuf:"varint,3,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePipeCall) Reset() {
	*x = CreatePipeCall{}
	mi := &file_kernel_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePipeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipeCall) ProtoMessage() {}

func (x *CreatePipeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipeCall.ProtoReflect.Descriptor instead.
func (*CreatePipeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{63}
}

func (x *CreatePipeCall) GetReaderPid() uint32 {
	if x != nil {
		return x.ReaderPid
	}
	return 0
}

func (x *CreatePipeCall) GetWriterPid() uint32 {
	if x != nil {
		return x.WriterPid
	}
	return 0
}

func (x *CreatePipeCall) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type WritePipeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeId        uint32                 `protobuf:"varint,1,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WritePipeCall) Reset() {
	*x = WritePipeCall{}
	mi := &file_kernel_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WritePipeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePipeCall) ProtoMessage() {}

func (x *WritePipeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePipeCall.ProtoReflect.Descriptor instead.
func (*WritePipeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{64}
}

func (x *WritePipeCall) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

func (x *WritePipeCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReadPipeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeId        uint32                 `protobuf:"varint,1,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	Size          uint32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadPipeCall) Reset() {
	*x = ReadPipeCall{}
	mi := &file_kernel_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadPipeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPipeCall) ProtoMessage() {}

func (x *ReadPipeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPipeCall.ProtoReflect.Descriptor instead.
func (*ReadPipeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{65}
}

func (x *ReadPipeCall) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

func (x *ReadPipeCall) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ClosePipeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeId        uint32                 `protobuf:"varint,1,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClosePipeCall) Reset() {
	*x = ClosePipeCall{}
	mi := &file_kernel_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosePipeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePipeCall) ProtoMessage() {}

func (x *ClosePipeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePipeCall.ProtoReflect.Descriptor instead.
func (*ClosePipeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{66}
}

func (x *ClosePipeCall) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

type DestroyPipeCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeId        uint32                 `protobuf:"varint,1,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyPipeCall) Reset() {
	*x = DestroyPipeCall{}
	mi := &file_kernel_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyPipeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyPipeCall) ProtoMessage() {}

func (x *DestroyPipeCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyPipeCall.ProtoReflect.Descriptor instead.
func (*DestroyPipeCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{67}
}

func (x *DestroyPipeCall) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

type PipeStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipeId        uint32                 `protobuf:"varint,1,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipeStatsCall) Reset() {
	*x = PipeStatsCall{}
	mi := &file_kernel_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipeStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeStatsCall) ProtoMessage() {}

func (x *PipeStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeStatsCall.ProtoReflect.Descriptor instead.
func (*PipeStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{68}
}

func (x *PipeStatsCall) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

type CreateShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          uint32                 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateShmCall) Reset() {
	*x = CreateShmCall{}
	mi := &file_kernel_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShmCall) ProtoMessage() {}

func (x *CreateShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShmCall.ProtoReflect.Descriptor instead.
func (*CreateShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{69}
}

func (x *CreateShmCall) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AttachShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachShmCall) Reset() {
	*x = AttachShmCall{}
	mi := &file_kernel_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachShmCall) ProtoMessage() {}

func (x *AttachShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachShmCall.ProtoReflect.Descriptor instead.
func (*AttachShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{70}
}

func (x *AttachShmCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *AttachShmCall) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type DetachShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetachShmCall) Reset() {
	*x = DetachShmCall{}
	mi := &file_kernel_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetachShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachShmCall) ProtoMessage() {}

func (x *DetachShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachShmCall.ProtoReflect.Descriptor instead.
func (*DetachShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{71}
}

func (x *DetachShmCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type WriteShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteShmCall) Reset() {
	*x = WriteShmCall{}
	mi := &file_kernel_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteShmCall) ProtoMessage() {}

func (x *WriteShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteShmCall.ProtoReflect.Descriptor instead.
func (*WriteShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{72}
}

func (x *WriteShmCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *WriteShmCall) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteShmCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReadShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          uint32                 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadShmCall) Reset() {
	*x = ReadShmCall{}
	mi := &file_kernel_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadShmCall) ProtoMessage() {}

func (x *ReadShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadShmCall.ProtoReflect.Descriptor instead.
func (*ReadShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{73}
}

func (x *ReadShmCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *ReadShmCall) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadShmCall) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DestroyShmCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyShmCall) Reset() {
	*x = DestroyShmCall{}
	mi := &file_kernel_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyShmCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyShmCall) ProtoMessage() {}

func (x *DestroyShmCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyShmCall.ProtoReflect.Descriptor instead.
func (*DestroyShmCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{74}
}

func (x *DestroyShmCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type ShmStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShmStatsCall) Reset() {
	*x = ShmStatsCall{}
	mi := &file_kernel_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShmStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShmStatsCall) ProtoMessage() {}

func (x *ShmStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShmStatsCall.ProtoReflect.Descriptor instead.
func (*ShmStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{75}
}

func (x *ShmStatsCall) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

type MmapCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length        uint32                 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Prot          uint32                 `protobuf:"varint,4,opt,name=prot,proto3" json:"prot,omitempty"`     // Protection flags: READ=1, WRITE=2, EXEC=4
	Shared        bool                   `protobuf:"varint,5,opt,name=shared,proto3" json:"shared,omitempty"` // true=Shared, false=Private
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MmapCall) Reset() {
	*x = MmapCall{}
	mi := &file_kernel_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MmapCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmapCall) ProtoMessage() {}

func (x *MmapCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmapCall.ProtoReflect.Descriptor instead.
func (*MmapCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{76}
}

func (x *MmapCall) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MmapCall) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MmapCall) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MmapCall) GetProt() uint32 {
	if x != nil {
		return x.Prot
	}
	return 0
}

func (x *MmapCall) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type MmapReadCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MmapId        uint32                 `protobuf:"varint,1,opt,name=mmap_id,json=mmapId,proto3" json:"mmap_id,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length        uint32                 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MmapReadCall) Reset() {
	*x = MmapReadCall{}
	mi := &file_kernel_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MmapReadCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmapReadCall) ProtoMessage() {}

func (x *MmapReadCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmapReadCall.ProtoReflect.Descriptor instead.
func (*MmapReadCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{77}
}

func (x *MmapReadCall) GetMmapId() uint32 {
	if x != nil {
		return x.MmapId
	}
	return 0
}

func (x *MmapReadCall) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MmapReadCall) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type MmapWriteCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MmapId        uint32                 `protobuf:"varint,1,opt,name=mmap_id,json=mmapId,proto3" json:"mmap_id,omitempty"`
	Offset        uint32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MmapWriteCall) Reset() {
	*x = MmapWriteCall{}
	mi := &file_kernel_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MmapWriteCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmapWriteCall) ProtoMessage() {}

func (x *MmapWriteCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmapWriteCall.ProtoReflect.Descriptor instead.
func (*MmapWriteCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{78}
}

func (x *MmapWriteCall) GetMmapId() uint32 {
	if x != nil {
		return x.MmapId
	}
	return 0
}

func (x *MmapWriteCall) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MmapWriteCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MsyncCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MmapId        uint32                 `protobuf:"varint,1,opt,name=mmap_id,json=mmapId,proto3" json:"mmap_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsyncCall) Reset() {
	*x = MsyncCall{}
	mi := &file_kernel_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsyncCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsyncCall) ProtoMessage() {}

func (x *MsyncCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsyncCall.ProtoReflect.Descriptor instead.
func (*MsyncCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{79}
}

func (x *MsyncCall) GetMmapId() uint32 {
	if x != nil {
		return x.MmapId
	}
	return 0
}

type MunmapCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MmapId        uint32                 `protobuf:"varint,1,opt,name=mmap_id,json=mmapId,proto3" json:"mmap_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MunmapCall) Reset() {
	*x = MunmapCall{}
	mi := &file_kernel_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MunmapCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MunmapCall) ProtoMessage() {}

func (x *MunmapCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MunmapCall.ProtoReflect.Descriptor instead.
func (*MunmapCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{80}
}

func (x *MunmapCall) GetMmapId() uint32 {
	if x != nil {
		return x.MmapId
	}
	return 0
}

type MmapStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MmapId        uint32                 `protobuf:"varint,1,opt,name=mmap_id,json=mmapId,proto3" json:"mmap_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MmapStatsCall) Reset() {
	*x = MmapStatsCall{}
	mi := &file_kernel_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MmapStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmapStatsCall) ProtoMessage() {}

func (x *MmapStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmapStatsCall.ProtoReflect.Descriptor instead.
func (*MmapStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{81}
}

func (x *MmapStatsCall) GetMmapId() uint32 {
	if x != nil {
		return x.MmapId
	}
	return 0
}

type CreateQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueType     string                 `protobuf:"bytes,1,opt,name=queue_type,json=queueType,proto3" json:"queue_type,omitempty"` // "fifo", "priority", "pubsub"
	Capacity      *uint32                `protobuf:"varint,2,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQueueCall) Reset() {
	*x = CreateQueueCall{}
	mi := &file_kernel_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueueCall) ProtoMessage() {}

func (x *CreateQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueueCall.ProtoReflect.Descriptor instead.
func (*CreateQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{82}
}

func (x *CreateQueueCall) GetQueueType() string {
	if x != nil {
		return x.QueueType
	}
	return ""
}

func (x *CreateQueueCall) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type SendQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Priority      *uint32                `protobuf:"varint,3,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendQueueCall) Reset() {
	*x = SendQueueCall{}
	mi := &file_kernel_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendQueueCall) ProtoMessage() {}

func (x *SendQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendQueueCall.ProtoReflect.Descriptor instead.
func (*SendQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{83}
}

func (x *SendQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *SendQueueCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendQueueCall) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type ReceiveQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveQueueCall) Reset() {
	*x = ReceiveQueueCall{}
	mi := &file_kernel_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveQueueCall) ProtoMessage() {}

func (x *ReceiveQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveQueueCall.ProtoReflect.Descriptor instead.
func (*ReceiveQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{84}
}

func (x *ReceiveQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type SubscribeQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeQueueCall) Reset() {
	*x = SubscribeQueueCall{}
	mi := &file_kernel_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQueueCall) ProtoMessage() {}

func (x *SubscribeQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQueueCall.ProtoReflect.Descriptor instead.
func (*SubscribeQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{85}
}

func (x *SubscribeQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type UnsubscribeQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeQueueCall) Reset() {
	*x = UnsubscribeQueueCall{}
	mi := &file_kernel_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeQueueCall) ProtoMessage() {}

func (x *UnsubscribeQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeQueueCall.ProtoReflect.Descriptor instead.
func (*UnsubscribeQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{86}
}

func (x *UnsubscribeQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type CloseQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseQueueCall) Reset() {
	*x = CloseQueueCall{}
	mi := &file_kernel_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseQueueCall) ProtoMessage() {}

func (x *CloseQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseQueueCall.ProtoReflect.Descriptor instead.
func (*CloseQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{87}
}

func (x *CloseQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type DestroyQueueCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyQueueCall) Reset() {
	*x = DestroyQueueCall{}
	mi := &file_kernel_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyQueueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyQueueCall) ProtoMessage() {}

func (x *DestroyQueueCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyQueueCall.ProtoReflect.Descriptor instead.
func (*DestroyQueueCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{88}
}

func (x *DestroyQueueCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type QueueStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueStatsCall) Reset() {
	*x = QueueStatsCall{}
	mi := &file_kernel_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStatsCall) ProtoMessage() {}

func (x *QueueStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStatsCall.ProtoReflect.Descriptor instead.
func (*QueueStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{89}
}

func (x *QueueStatsCall) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

type ScheduleNextCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleNextCall) Reset() {
	*x = ScheduleNextCall{}
	mi := &file_kernel_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleNextCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleNextCall) ProtoMessage() {}

func (x *ScheduleNextCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleNextCall.ProtoReflect.Descriptor instead.
func (*ScheduleNextCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{90}
}

type YieldProcessCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YieldProcessCall) Reset() {
	*x = YieldProcessCall{}
	mi := &file_kernel_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YieldProcessCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldProcessCall) ProtoMessage() {}

func (x *YieldProcessCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldProcessCall.ProtoReflect.Descriptor instead.
func (*YieldProcessCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{91}
}

type GetCurrentScheduledCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentScheduledCall) Reset() {
	*x = GetCurrentScheduledCall{}
	mi := &file_kernel_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentScheduledCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentScheduledCall) ProtoMessage() {}

func (x *GetCurrentScheduledCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentScheduledCall.ProtoReflect.Descriptor instead.
func (*GetCurrentScheduledCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{92}
}

type GetSchedulerStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulerStatsCall) Reset() {
	*x = GetSchedulerStatsCall{}
	mi := &file_kernel_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatsCall) ProtoMessage() {}

func (x *GetSchedulerStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatsCall.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{93}
}

type SetSchedulingPolicyCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policy        string                 `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"` // "round_robin", "priority", "fair"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSchedulingPolicyCall) Reset() {
	*x = SetSchedulingPolicyCall{}
	mi := &file_kernel_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSchedulingPolicyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingPolicyCall) ProtoMessage() {}

func (x *SetSchedulingPolicyCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingPolicyCall.ProtoReflect.Descriptor instead.
func (*SetSchedulingPolicyCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{94}
}

func (x *SetSchedulingPolicyCall) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

type GetSchedulingPolicyCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulingPolicyCall) Reset() {
	*x = GetSchedulingPolicyCall{}
	mi := &file_kernel_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulingPolicyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingPolicyCall) ProtoMessage() {}

func (x *GetSchedulingPolicyCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingPolicyCall.ProtoReflect.Descriptor instead.
func (*GetSchedulingPolicyCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{95}
}

type SetTimeQuantumCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuantumMicros uint64                 `protobuf:"varint,1,opt,name=quantum_micros,json=quantumMicros,proto3" json:"quantum_micros,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTimeQuantumCall) Reset() {
	*x = SetTimeQuantumCall{}
	mi := &file_kernel_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTimeQuantumCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTimeQuantumCall) ProtoMessage() {}

func (x *SetTimeQuantumCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTimeQuantumCall.ProtoReflect.Descriptor instead.
func (*SetTimeQuantumCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{96}
}

func (x *SetTimeQuantumCall) GetQuantumMicros() uint64 {
	if x != nil {
		return x.QuantumMicros
	}
	return 0
}

type GetTimeQuantumCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeQuantumCall) Reset() {
	*x = GetTimeQuantumCall{}
	mi := &file_kernel_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeQuantumCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeQuantumCall) ProtoMessage() {}

func (x *GetTimeQuantumCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeQuantumCall.ProtoReflect.Descriptor instead.
func (*GetTimeQuantumCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{97}
}

type GetProcessSchedulerStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProcessSchedulerStatsCall) Reset() {
	*x = GetProcessSchedulerStatsCall{}
	mi := &file_kernel_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProcessSchedulerStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessSchedulerStatsCall) ProtoMessage() {}

func (x *GetProcessSchedulerStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessSchedulerStatsCall.ProtoReflect.Descriptor instead.
func (*GetProcessSchedulerStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{98}
}

func (x *GetProcessSchedulerStatsCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type GetAllProcessSchedulerStatsCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllProcessSchedulerStatsCall) Reset() {
	*x = GetAllProcessSchedulerStatsCall{}
	mi := &file_kernel_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllProcessSchedulerStatsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProcessSchedulerStatsCall) ProtoMessage() {}

func (x *GetAllProcessSchedulerStatsCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProcessSchedulerStatsCall.ProtoReflect.Descriptor instead.
func (*GetAllProcessSchedulerStatsCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{99}
}

type BoostPriorityCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoostPriorityCall) Reset() {
	*x = BoostPriorityCall{}
	mi := &file_kernel_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoostPriorityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoostPriorityCall) ProtoMessage() {}

func (x *BoostPriorityCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoostPriorityCall.ProtoReflect.Descriptor instead.
func (*BoostPriorityCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{100}
}

func (x *BoostPriorityCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type LowerPriorityCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetPid     uint32                 `protobuf:"varint,1,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LowerPriorityCall) Reset() {
	*x = LowerPriorityCall{}
	mi := &file_kernel_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LowerPriorityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowerPriorityCall) ProtoMessage() {}

func (x *LowerPriorityCall) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowerPriorityCall.ProtoReflect.Descriptor instead.
func (*LowerPriorityCall) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{101}
}

func (x *LowerPriorityCall) GetTargetPid() uint32 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

type CreateProcessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Priority      uint32                 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	SandboxLevel  SandboxLevel           `protobuf:"varint,3,opt,name=sandbox_level,json=sandboxLevel,proto3,enum=kernel.SandboxLevel" json:"sandbox_level,omitempty"`
	Command       *string                `protobuf:"bytes,4,opt,name=command,proto3,oneof" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	EnvVars       []string               `protobuf:"bytes,6,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProcessRequest) Reset() {
	*x = CreateProcessRequest{}
	mi := &file_kernel_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessRequest) ProtoMessage() {}

func (x *CreateProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessRequest.ProtoReflect.Descriptor instead.
func (*CreateProcessRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{102}
}

func (x *CreateProcessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProcessRequest) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateProcessRequest) GetSandboxLevel() SandboxLevel {
	if x != nil {
		return x.SandboxLevel
	}
	return SandboxLevel_MINIMAL
}

func (x *CreateProcessRequest) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *CreateProcessRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateProcessRequest) GetEnvVars() []string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type CreateProcessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	OsPid         *uint32                `protobuf:"varint,4,opt,name=os_pid,json=osPid,proto3,oneof" json:"os_pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProcessResponse) Reset() {
	*x = CreateProcessResponse{}
	mi := &file_kernel_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessResponse) ProtoMessage() {}

func (x *CreateProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessResponse.ProtoReflect.Descriptor instead.
func (*CreateProcessResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{103}
}

func (x *CreateProcessResponse) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *CreateProcessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateProcessResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CreateProcessResponse) GetOsPid() uint32 {
	if x != nil && x.OsPid != nil {
		return *x.OsPid
	}
	return 0
}

type UpdateSandboxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Capabilities  []Capability           `protobuf:"varint,2,rep,packed,name=capabilities,proto3,enum=kernel.Capability" json:"capabilities,omitempty"`
	AllowedPaths  []string               `protobuf:"bytes,3,rep,name=allowed_paths,json=allowedPaths,proto3" json:"allowed_paths,omitempty"`
	BlockedPaths  []string               `protobuf:"bytes,4,rep,name=blocked_paths,json=blockedPaths,proto3" json:"blocked_paths,omitempty"`
	Limits        *ResourceLimits        `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSandboxRequest) Reset() {
	*x = UpdateSandboxRequest{}
	mi := &file_kernel_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSandboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSandboxRequest) ProtoMessage() {}

func (x *UpdateSandboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSandboxRequest.ProtoReflect.Descriptor instead.
func (*UpdateSandboxRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateSandboxRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UpdateSandboxRequest) GetCapabilities() []Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *UpdateSandboxRequest) GetAllowedPaths() []string {
	if x != nil {
		return x.AllowedPaths
	}
	return nil
}

func (x *UpdateSandboxRequest) GetBlockedPaths() []string {
	if x != nil {
		return x.BlockedPaths
	}
	return nil
}

func (x *UpdateSandboxRequest) GetLimits() *ResourceLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type UpdateSandboxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSandboxResponse) Reset() {
	*x = UpdateSandboxResponse{}
	mi := &file_kernel_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSandboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSandboxResponse) ProtoMessage() {}

func (x *UpdateSandboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSandboxResponse.ProtoReflect.Descriptor instead.
func (*UpdateSandboxResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateSandboxResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateSandboxResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ResourceLimits struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	MaxMemoryBytes        uint64                 `protobuf:"varint,1,opt,name=max_memory_bytes,json=maxMemoryBytes,proto3" json:"max_memory_bytes,omitempty"`
	MaxCpuTimeMs          uint64                 `protobuf:"varint,2,opt,name=max_cpu_time_ms,json=maxCpuTimeMs,proto3" json:"max_cpu_time_ms,omitempty"`
	MaxFileDescriptors    uint32                 `protobuf:"varint,3,opt,name=max_file_descriptors,json=maxFileDescriptors,proto3" json:"max_file_descriptors,omitempty"`
	MaxProcesses          uint32                 `protobuf:"varint,4,opt,name=max_processes,json=maxProcesses,proto3" json:"max_processes,omitempty"`
	MaxNetworkConnections uint32                 `protobuf:"varint,5,opt,name=max_network_connections,json=maxNetworkConnections,proto3" json:"max_network_connections,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	mi := &file_kernel_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{106}
}

func (x *ResourceLimits) GetMaxMemoryBytes() uint64 {
	if x != nil {
		return x.MaxMemoryBytes
	}
	return 0
}

func (x *ResourceLimits) GetMaxCpuTimeMs() uint64 {
	if x != nil {
		return x.MaxCpuTimeMs
	}
	return 0
}

func (x *ResourceLimits) GetMaxFileDescriptors() uint32 {
	if x != nil {
		return x.MaxFileDescriptors
	}
	return 0
}

func (x *ResourceLimits) GetMaxProcesses() uint32 {
	if x != nil {
		return x.MaxProcesses
	}
	return 0
}

func (x *ResourceLimits) GetMaxNetworkConnections() uint32 {
	if x != nil {
		return x.MaxNetworkConnections
	}
	return 0
}

type EventStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventTypes    []string               `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStreamRequest) Reset() {
	*x = EventStreamRequest{}
	mi := &file_kernel_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamRequest) ProtoMessage() {}

func (x *EventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamRequest.ProtoReflect.Descriptor instead.
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{107}
}

func (x *EventStreamRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type KernelEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*KernelEvent_ProcessCreated
	//	*KernelEvent_ProcessTerminated
	//	*KernelEvent_SyscallExecuted
	//	*KernelEvent_PermissionDenied
	//	*KernelEvent_ResourceCleanup
	Event         isKernelEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KernelEvent) Reset() {
	*x = KernelEvent{}
	mi := &file_kernel_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelEvent) ProtoMessage() {}

func (x *KernelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelEvent.ProtoReflect.Descriptor instead.
func (*KernelEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{108}
}

func (x *KernelEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KernelEvent) GetEvent() isKernelEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *KernelEvent) GetProcessCreated() *ProcessCreatedEvent {
	if x != nil {
		if x, ok := x.Event.(*KernelEvent_ProcessCreated); ok {
			return x.ProcessCreated
		}
	}
	return nil
}

func (x *KernelEvent) GetProcessTerminated() *ProcessTerminatedEvent {
	if x != nil {
		if x, ok := x.Event.(*KernelEvent_ProcessTerminated); ok {
			return x.ProcessTerminated
		}
	}
	return nil
}

func (x *KernelEvent) GetSyscallExecuted() *SyscallExecutedEvent {
	if x != nil {
		if x, ok := x.Event.(*KernelEvent_SyscallExecuted); ok {
			return x.SyscallExecuted
		}
	}
	return nil
}

func (x *KernelEvent) GetPermissionDenied() *PermissionDeniedEvent {
	if x != nil {
		if x, ok := x.Event.(*KernelEvent_PermissionDenied); ok {
			return x.PermissionDenied
		}
	}
	return nil
}

func (x *KernelEvent) GetResourceCleanup() *ResourceCleanupEvent {
	if x != nil {
		if x, ok := x.Event.(*KernelEvent_ResourceCleanup); ok {
			return x.ResourceCleanup
		}
	}
	return nil
}

type isKernelEvent_Event interface {
	isKernelEvent_Event()
}

type KernelEvent_ProcessCreated struct {
	ProcessCreated *ProcessCreatedEvent `protobuf:"bytes,10,opt,name=process_created,json=processCreated,proto3,oneof"`
}

type KernelEvent_ProcessTerminated struct {
	ProcessTerminated *ProcessTerminatedEvent `protobuf:"bytes,11,opt,name=process_terminated,json=processTerminated,proto3,oneof"`
}

type KernelEvent_SyscallExecuted struct {
	SyscallExecuted *SyscallExecutedEvent `protobuf:"bytes,12,opt,name=syscall_executed,json=syscallExecuted,proto3,oneof"`
}

type KernelEvent_PermissionDenied struct {
	PermissionDenied *PermissionDeniedEvent `protobuf:"bytes,13,opt,name=permission_denied,json=permissionDenied,proto3,oneof"`
}

type KernelEvent_ResourceCleanup struct {
	ResourceCleanup *ResourceCleanupEvent `protobuf:"bytes,14,opt,name=resource_cleanup,json=resourceCleanup,proto3,oneof"`
}

func (*KernelEvent_ProcessCreated) isKernelEvent_Event() {}

func (*KernelEvent_ProcessTerminated) isKernelEvent_Event() {}

func (*KernelEvent_SyscallExecuted) isKernelEvent_Event() {}

func (*KernelEvent_PermissionDenied) isKernelEvent_Event() {}

func (*KernelEvent_ResourceCleanup) isKernelEvent_Event() {}

type ProcessCreatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessCreatedEvent) Reset() {
	*x = ProcessCreatedEvent{}
	mi := &file_kernel_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCreatedEvent) ProtoMessage() {}

func (x *ProcessCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCreatedEvent.ProtoReflect.Descriptor instead.
func (*ProcessCreatedEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{109}
}

func (x *ProcessCreatedEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessCreatedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessTerminatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	ExitCode      int32                  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessTerminatedEvent) Reset() {
	*x = ProcessTerminatedEvent{}
	mi := &file_kernel_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTerminatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTerminatedEvent) ProtoMessage() {}

func (x *ProcessTerminatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTerminatedEvent.ProtoReflect.Descriptor instead.
func (*ProcessTerminatedEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{110}
}

func (x *ProcessTerminatedEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessTerminatedEvent) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type SyscallExecutedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	SyscallType   string                 `protobuf:"bytes,2,opt,name=syscall_type,json=syscallType,proto3" json:"syscall_type,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyscallExecutedEvent) Reset() {
	*x = SyscallExecutedEvent{}
	mi := &file_kernel_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyscallExecutedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallExecutedEvent) ProtoMessage() {}

func (x *SyscallExecutedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallExecutedEvent.ProtoReflect.Descriptor instead.
func (*SyscallExecutedEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{111}
}

func (x *SyscallExecutedEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SyscallExecutedEvent) GetSyscallType() string {
	if x != nil {
		return x.SyscallType
	}
	return ""
}

func (x *SyscallExecutedEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PermissionDeniedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	SyscallType   string                 `protobuf:"bytes,2,opt,name=syscall_type,json=syscallType,proto3" json:"syscall_type,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionDeniedEvent) Reset() {
	*x = PermissionDeniedEvent{}
	mi := &file_kernel_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionDeniedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionDeniedEvent) ProtoMessage() {}

func (x *PermissionDeniedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionDeniedEvent.ProtoReflect.Descriptor instead.
func (*PermissionDeniedEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{112}
}

func (x *PermissionDeniedEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *PermissionDeniedEvent) GetSyscallType() string {
	if x != nil {
		return x.SyscallType
	}
	return ""
}

func (x *PermissionDeniedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ResourceCleanupEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Pid               uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	ResourcesFreed    uint64                 `protobuf:"varint,2,opt,name=resources_freed,json=resourcesFreed,proto3" json:"resources_freed,omitempty"`
	BytesFreed        uint64                 `protobuf:"varint,3,opt,name=bytes_freed,json=bytesFreed,proto3" json:"bytes_freed,omitempty"`
	CleanupDurationUs uint64                 `protobuf:"varint,4,opt,name=cleanup_duration_us,json=cleanupDurationUs,proto3" json:"cleanup_duration_us,omitempty"`
	ByType            []*ResourceTypeCleanup `protobuf:"bytes,5,rep,name=by_type,json=byType,proto3" json:"by_type,omitempty"`
	Errors            []string               `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ResourceCleanupEvent) Reset() {
	*x = ResourceCleanupEvent{}
	mi := &file_kernel_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceCleanupEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCleanupEvent) ProtoMessage() {}

func (x *ResourceCleanupEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCleanupEvent.ProtoReflect.Descriptor instead.
func (*ResourceCleanupEvent) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{113}
}

func (x *ResourceCleanupEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ResourceCleanupEvent) GetResourcesFreed() uint64 {
	if x != nil {
		return x.ResourcesFreed
	}
	return 0
}

func (x *ResourceCleanupEvent) GetBytesFreed() uint64 {
	if x != nil {
		return x.BytesFreed
	}
	return 0
}

func (x *ResourceCleanupEvent) GetCleanupDurationUs() uint64 {
	if x != nil {
		return x.CleanupDurationUs
	}
	return 0
}

func (x *ResourceCleanupEvent) GetByType() []*ResourceTypeCleanup {
	if x != nil {
		return x.ByType
	}
	return nil
}

func (x *ResourceCleanupEvent) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ResourceTypeCleanup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResourceType  string                 `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Count         uint64                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTypeCleanup) Reset() {
	*x = ResourceTypeCleanup{}
	mi := &file_kernel_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTypeCleanup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeCleanup) ProtoMessage() {}

func (x *ResourceTypeCleanup) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeCleanup.ProtoReflect.Descriptor instead.
func (*ResourceTypeCleanup) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{114}
}

func (x *ResourceTypeCleanup) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ResourceTypeCleanup) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ScheduleNextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleNextRequest) Reset() {
	*x = ScheduleNextRequest{}
	mi := &file_kernel_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleNextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleNextRequest) ProtoMessage() {}

func (x *ScheduleNextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleNextRequest.ProtoReflect.Descriptor instead.
func (*ScheduleNextRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{115}
}

type ScheduleNextResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	NextPid       *uint32                `protobuf:"varint,2,opt,name=next_pid,json=nextPid,proto3,oneof" json:"next_pid,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleNextResponse) Reset() {
	*x = ScheduleNextResponse{}
	mi := &file_kernel_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleNextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleNextResponse) ProtoMessage() {}

func (x *ScheduleNextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleNextResponse.ProtoReflect.Descriptor instead.
func (*ScheduleNextResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{116}
}

func (x *ScheduleNextResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ScheduleNextResponse) GetNextPid() uint32 {
	if x != nil && x.NextPid != nil {
		return *x.NextPid
	}
	return 0
}

func (x *ScheduleNextResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetSchedulerStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulerStatsRequest) Reset() {
	*x = GetSchedulerStatsRequest{}
	mi := &file_kernel_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatsRequest) ProtoMessage() {}

func (x *GetSchedulerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatsRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{117}
}

type GetSchedulerStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Stats         *SchedulerStats        `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchedulerStatsResponse) Reset() {
	*x = GetSchedulerStatsResponse{}
	mi := &file_kernel_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatsResponse) ProtoMessage() {}

func (x *GetSchedulerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatsResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{118}
}

func (x *GetSchedulerStatsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetSchedulerStatsResponse) GetStats() *SchedulerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetSchedulerStatsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SchedulerStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalScheduled  uint64                 `protobuf:"varint,1,opt,name=total_scheduled,json=totalScheduled,proto3" json:"total_scheduled,omitempty"`
	ContextSwitches uint64                 `protobuf:"varint,2,opt,name=context_switches,json=contextSwitches,proto3" json:"context_switches,omitempty"`
	Preemptions     uint64                 `protobuf:"varint,3,opt,name=preemptions,proto3" json:"preemptions,omitempty"`
	ActiveProcesses uint32                 `protobuf:"varint,4,opt,name=active_processes,json=activeProcesses,proto3" json:"active_processes,omitempty"`
	Policy          string                 `protobuf:"bytes,5,opt,name=policy,proto3" json:"policy,omitempty"`
	QuantumMicros   uint64                 `protobuf:"varint,6,opt,name=quantum_micros,json=quantumMicros,proto3" json:"quantum_micros,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SchedulerStats) Reset() {
	*x = SchedulerStats{}
	mi := &file_kernel_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerStats) ProtoMessage() {}

func (x *SchedulerStats) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerStats.ProtoReflect.Descriptor instead.
func (*SchedulerStats) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{119}
}

func (x *SchedulerStats) GetTotalScheduled() uint64 {
	if x != nil {
		return x.TotalScheduled
	}
	return 0
}

func (x *SchedulerStats) GetContextSwitches() uint64 {
	if x != nil {
		return x.ContextSwitches
	}
	return 0
}

func (x *SchedulerStats) GetPreemptions() uint64 {
	if x != nil {
		return x.Preemptions
	}
	return 0
}

func (x *SchedulerStats) GetActiveProcesses() uint32 {
	if x != nil {
		return x.ActiveProcesses
	}
	return 0
}

func (x *SchedulerStats) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *SchedulerStats) GetQuantumMicros() uint64 {
	if x != nil {
		return x.QuantumMicros
	}
	return 0
}

type SetSchedulingPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policy        string                 `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"` // "RoundRobin", "Priority", or "Fair"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSchedulingPolicyRequest) Reset() {
	*x = SetSchedulingPolicyRequest{}
	mi := &file_kernel_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSchedulingPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingPolicyRequest) ProtoMessage() {}

func (x *SetSchedulingPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingPolicyRequest.ProtoReflect.Descriptor instead.
func (*SetSchedulingPolicyRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{120}
}

func (x *SetSchedulingPolicyRequest) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

type SetSchedulingPolicyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSchedulingPolicyResponse) Reset() {
	*x = SetSchedulingPolicyResponse{}
	mi := &file_kernel_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSchedulingPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingPolicyResponse) ProtoMessage() {}

func (x *SetSchedulingPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingPolicyResponse.ProtoReflect.Descriptor instead.
func (*SetSchedulingPolicyResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{121}
}

func (x *SetSchedulingPolicyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetSchedulingPolicyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StreamSyscallRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Pid   uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamSyscallRequest_Read
	//	*StreamSyscallRequest_Write
	Request       isStreamSyscallRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSyscallRequest) Reset() {
	*x = StreamSyscallRequest{}
	mi := &file_kernel_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSyscallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSyscallRequest) ProtoMessage() {}

func (x *StreamSyscallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSyscallRequest.ProtoReflect.Descriptor instead.
func (*StreamSyscallRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{122}
}

func (x *StreamSyscallRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *StreamSyscallRequest) GetRequest() isStreamSyscallRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamSyscallRequest) GetRead() *StreamFileRead {
	if x != nil {
		if x, ok := x.Request.(*StreamSyscallRequest_Read); ok {
			return x.Read
		}
	}
	return nil
}

func (x *StreamSyscallRequest) GetWrite() *StreamFileWrite {
	if x != nil {
		if x, ok := x.Request.(*StreamSyscallRequest_Write); ok {
			return x.Write
		}
	}
	return nil
}

type isStreamSyscallRequest_Request interface {
	isStreamSyscallRequest_Request()
}

type StreamSyscallRequest_Read struct {
	Read *StreamFileRead `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

type StreamSyscallRequest_Write struct {
	Write *StreamFileWrite `protobuf:"bytes,3,opt,name=write,proto3,oneof"`
}

func (*StreamSyscallRequest_Read) isStreamSyscallRequest_Request() {}

func (*StreamSyscallRequest_Write) isStreamSyscallRequest_Request() {}

type StreamFileRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ChunkSize     uint32                 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"` // bytes per chunk, default 64KB
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamFileRead) Reset() {
	*x = StreamFileRead{}
	mi := &file_kernel_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFileRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFileRead) ProtoMessage() {}

func (x *StreamFileRead) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFileRead.ProtoReflect.Descriptor instead.
func (*StreamFileRead) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{123}
}

func (x *StreamFileRead) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StreamFileRead) GetChunkSize() uint32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type StreamFileWrite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Chunk         []byte                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Finish        bool                   `protobuf:"varint,3,opt,name=finish,proto3" json:"finish,omitempty"` // true on last chunk
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamFileWrite) Reset() {
	*x = StreamFileWrite{}
	mi := &file_kernel_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFileWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFileWrite) ProtoMessage() {}

func (x *StreamFileWrite) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFileWrite.ProtoReflect.Descriptor instead.
func (*StreamFileWrite) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{124}
}

func (x *StreamFileWrite) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StreamFileWrite) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *StreamFileWrite) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

type StreamSyscallChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Chunk:
	//
	//	*StreamSyscallChunk_Data
	//	*StreamSyscallChunk_Error
	//	*StreamSyscallChunk_Complete
	Chunk         isStreamSyscallChunk_Chunk `protobuf_oneof:"chunk"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSyscallChunk) Reset() {
	*x = StreamSyscallChunk{}
	mi := &file_kernel_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSyscallChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSyscallChunk) ProtoMessage() {}

func (x *StreamSyscallChunk) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSyscallChunk.ProtoReflect.Descriptor instead.
func (*StreamSyscallChunk) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{125}
}

func (x *StreamSyscallChunk) GetChunk() isStreamSyscallChunk_Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *StreamSyscallChunk) GetData() []byte {
	if x != nil {
		if x, ok := x.Chunk.(*StreamSyscallChunk_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *StreamSyscallChunk) GetError() string {
	if x != nil {
		if x, ok := x.Chunk.(*StreamSyscallChunk_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *StreamSyscallChunk) GetComplete() *StreamComplete {
	if x != nil {
		if x, ok := x.Chunk.(*StreamSyscallChunk_Complete); ok {
			return x.Complete
		}
	}
	return nil
}

type isStreamSyscallChunk_Chunk interface {
	isStreamSyscallChunk_Chunk()
}

type StreamSyscallChunk_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type StreamSyscallChunk_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StreamSyscallChunk_Complete struct {
	Complete *StreamComplete `protobuf:"bytes,3,opt,name=complete,proto3,oneof"`
}

func (*StreamSyscallChunk_Data) isStreamSyscallChunk_Chunk() {}

func (*StreamSyscallChunk_Error) isStreamSyscallChunk_Chunk() {}

func (*StreamSyscallChunk_Complete) isStreamSyscallChunk_Chunk() {}

type StreamComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalBytes    uint64                 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamComplete) Reset() {
	*x = StreamComplete{}
	mi := &file_kernel_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamComplete) ProtoMessage() {}

func (x *StreamComplete) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamComplete.ProtoReflect.Descriptor instead.
func (*StreamComplete) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{126}
}

func (x *StreamComplete) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

type AsyncSyscallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Accepted      bool                   `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncSyscallResponse) Reset() {
	*x = AsyncSyscallResponse{}
	mi := &file_kernel_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncSyscallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncSyscallResponse) ProtoMessage() {}

func (x *AsyncSyscallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncSyscallResponse.ProtoReflect.Descriptor instead.
func (*AsyncSyscallResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{127}
}

func (x *AsyncSyscallResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AsyncSyscallResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *AsyncSyscallResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AsyncStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncStatusRequest) Reset() {
	*x = AsyncStatusRequest{}
	mi := &file_kernel_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncStatusRequest) ProtoMessage() {}

func (x *AsyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncStatusRequest.ProtoReflect.Descriptor instead.
func (*AsyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{128}
}

func (x *AsyncStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type AsyncStatusResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Status        AsyncStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=kernel.AsyncStatusResponse_Status" json:"status,omitempty"`
	Result        *SyscallResponse           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Progress      float32                    `protobuf:"fixed32,3,opt,name=progress,proto3" json:"progress,omitempty"` // 0.0 to 1.0
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncStatusResponse) Reset() {
	*x = AsyncStatusResponse{}
	mi := &file_kernel_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncStatusResponse) ProtoMessage() {}

func (x *AsyncStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncStatusResponse.ProtoReflect.Descriptor instead.
func (*AsyncStatusResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{129}
}

func (x *AsyncStatusResponse) GetStatus() AsyncStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return AsyncStatusResponse_PENDING
}

func (x *AsyncStatusResponse) GetResult() *SyscallResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AsyncStatusResponse) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type AsyncCancelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncCancelRequest) Reset() {
	*x = AsyncCancelRequest{}
	mi := &file_kernel_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCancelRequest) ProtoMessage() {}

func (x *AsyncCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCancelRequest.ProtoReflect.Descriptor instead.
func (*AsyncCancelRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{130}
}

func (x *AsyncCancelRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type AsyncCancelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cancelled     bool                   `protobuf:"varint,1,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncCancelResponse) Reset() {
	*x = AsyncCancelResponse{}
	mi := &file_kernel_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCancelResponse) ProtoMessage() {}

func (x *AsyncCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCancelResponse.ProtoReflect.Descriptor instead.
func (*AsyncCancelResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{131}
}

func (x *AsyncCancelResponse) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

func (x *AsyncCancelResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type BatchSyscallRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*SyscallRequest      `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Parallel      bool                   `protobuf:"varint,2,opt,name=parallel,proto3" json:"parallel,omitempty"` // execute in parallel if true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSyscallRequest) Reset() {
	*x = BatchSyscallRequest{}
	mi := &file_kernel_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSyscallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSyscallRequest) ProtoMessage() {}

func (x *BatchSyscallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSyscallRequest.ProtoReflect.Descriptor instead.
func (*BatchSyscallRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{132}
}

func (x *BatchSyscallRequest) GetRequests() []*SyscallRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchSyscallRequest) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

type BatchSyscallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Responses     []*SyscallResponse     `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	SuccessCount  uint32                 `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailureCount  uint32                 `protobuf:"varint,3,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSyscallResponse) Reset() {
	*x = BatchSyscallResponse{}
	mi := &file_kernel_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSyscallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSyscallResponse) ProtoMessage() {}

func (x *BatchSyscallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSyscallResponse.ProtoReflect.Descriptor instead.
func (*BatchSyscallResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{133}
}

func (x *BatchSyscallResponse) GetResponses() []*SyscallResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchSyscallResponse) GetSuccessCount() uint32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchSyscallResponse) GetFailureCount() uint32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

type ReapCompletionsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pid            uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	MaxCompletions uint32                 `protobuf:"varint,2,opt,name=max_completions,json=maxCompletions,proto3" json:"max_completions,omitempty"` // 0 means all
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReapCompletionsRequest) Reset() {
	*x = ReapCompletionsRequest{}
	mi := &file_kernel_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReapCompletionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapCompletionsRequest) ProtoMessage() {}

func (x *ReapCompletionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapCompletionsRequest.ProtoReflect.Descriptor instead.
func (*ReapCompletionsRequest) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{134}
}

func (x *ReapCompletionsRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ReapCompletionsRequest) GetMaxCompletions() uint32 {
	if x != nil {
		return x.MaxCompletions
	}
	return 0
}

type ReapCompletionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completions   []*IoUringCompletion   `protobuf:"bytes,1,rep,name=completions,proto3" json:"completions,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReapCompletionsResponse) Reset() {
	*x = ReapCompletionsResponse{}
	mi := &file_kernel_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReapCompletionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapCompletionsResponse) ProtoMessage() {}

func (x *ReapCompletionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapCompletionsResponse.ProtoReflect.Descriptor instead.
func (*ReapCompletionsResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{135}
}

func (x *ReapCompletionsResponse) GetCompletions() []*IoUringCompletion {
	if x != nil {
		return x.Completions
	}
	return nil
}

func (x *ReapCompletionsResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IoUringCompletion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`                           // Sequence number
	UserData      uint64                 `protobuf:"varint,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"` // User-provided correlation data
	Result        *SyscallResponse       `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`                      // Result of the operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IoUringCompletion) Reset() {
	*x = IoUringCompletion{}
	mi := &file_kernel_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IoUringCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoUringCompletion) ProtoMessage() {}

func (x *IoUringCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoUringCompletion.ProtoReflect.Descriptor instead.
func (*IoUringCompletion) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{136}
}

func (x *IoUringCompletion) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IoUringCompletion) GetUserData() uint64 {
	if x != nil {
		return x.UserData
	}
	return 0
}

func (x *IoUringCompletion) GetResult() *SyscallResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type IoUringBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sequences     []uint64               `protobuf:"varint,1,rep,packed,name=sequences,proto3" json:"sequences,omitempty"` // Assigned sequence numbers
	Accepted      bool                   `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IoUringBatchResponse) Reset() {
	*x = IoUringBatchResponse{}
	mi := &file_kernel_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IoUringBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoUringBatchResponse) ProtoMessage() {}

func (x *IoUringBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kernel_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoUringBatchResponse.ProtoReflect.Descriptor instead.
func (*IoUringBatchResponse) Descriptor() ([]byte, []int) {
	return file_kernel_proto_rawDescGZIP(), []int{137}
}

func (x *IoUringBatchResponse) GetSequences() []uint64 {
	if x != nil {
		return x.Sequences
	}
	return nil
}

func (x *IoUringBatchResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *IoUringBatchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_kernel_proto protoreflect.FileDescriptor

const file_kernel_proto_rawDesc = "" +
	"\n" +
	"\fkernel.proto\x12\x06kernel\"\xc5/\n" +
	"\x0eSyscallRequest\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x123\n" +
	"\tread_file\x18\n" +
	" \x01(\v2\x14.kernel.ReadFileCallH\x00R\breadFile\x126\n" +
	"\n" +
	"write_file\x18\v \x01(\v2\x15.kernel.WriteFileCallH\x00R\twriteFile\x129\n" +
	"\vcreate_file\x18\f \x01(\v2\x16.kernel.CreateFileCallH\x00R\n" +
	"createFile\x129\n" +
	"\vdelete_file\x18\r \x01(\v2\x16.kernel.DeleteFileCallH\x00R\n" +
	"deleteFile\x12B\n" +
	"\x0elist_directory\x18\x0e \x01(\v2\x19.kernel.ListDirectoryCallH\x00R\rlistDirectory\x129\n" +
	"\vfile_exists\x18\x0f \x01(\v2\x16.kernel.FileExistsCallH\x00R\n" +
	"fileExists\x123\n" +
	"\tfile_stat\x18\x10 \x01(\v2\x14.kernel.FileStatCallH\x00R\bfileStat\x123\n" +
	"\tmove_file\x18\x11 \x01(\v2\x14.kernel.MoveFileCallH\x00R\bmoveFile\x123\n" +
	"\tcopy_file\x18\x12 \x01(\v2\x14.kernel.CopyFileCallH\x00R\bcopyFile\x12H\n" +
	"\x10create_directory\x18\x13 \x01(\v2\x1b.kernel.CreateDirectoryCallH\x00R\x0fcreateDirectory\x12H\n" +
	"\x10remove_directory\x18\x16 \x01(\v2\x1b.kernel.RemoveDirectoryCallH\x00R\x0fremoveDirectory\x12U\n" +
	"\x15get_working_directory\x18\x17 \x01(\v2\x1f.kernel.GetWorkingDirectoryCallH\x00R\x13getWorkingDirectory\x12U\n" +
	"\x15set_working_directory\x18\x18 \x01(\v2\x1f.kernel.SetWorkingDirectoryCallH\x00R\x13setWorkingDirectory\x12?\n" +
	"\rtruncate_file\x18\x19 \x01(\v2\x18.kernel.TruncateFileCallH\x00R\ftruncateFile\x12?\n" +
	"\rspawn_process\x18\x14 \x01(\v2\x18.kernel.SpawnProcessCallH\x00R\fspawnProcess\x12<\n" +
	"\fkill_process\x18\x15 \x01(\v2\x17.kernel.KillProcessCallH\x00R\vkillProcess\x12F\n" +
	"\x10get_process_info\x18\x1a \x01(\v2\x1a.kernel.GetProcessInfoCallH\x00R\x0egetProcessInfo\x12F\n" +
	"\x10get_process_list\x18\x1b \x01(\v2\x1a.kernel.GetProcessListCallH\x00R\x0egetProcessList\x12R\n" +
	"\x14set_process_priority\x18\x1c \x01(\v2\x1e.kernel.SetProcessPriorityCallH\x00R\x12setProcessPriority\x12I\n" +
	"\x11get_process_state\x18\x1d \x01(\v2\x1b.kernel.GetProcessStateCallH\x00R\x0fgetProcessState\x12I\n" +
	"\x11get_process_stats\x18! \x01(\v2\x1b.kernel.GetProcessStatsCallH\x00R\x0fgetProcessStats\x12<\n" +
	"\fwait_process\x18\" \x01(\v2\x17.kernel.WaitProcessCallH\x00R\vwaitProcess\x12C\n" +
	"\x0fget_system_info\x18\x1e \x01(\v2\x19.kernel.GetSystemInfoCallH\x00R\rgetSystemInfo\x12F\n" +
	"\x10get_current_time\x18\x1f \x01(\v2\x1a.kernel.GetCurrentTimeCallH\x00R\x0egetCurrentTime\x127\n" +
	"\vget_env_var\x18  \x01(\v2\x15.kernel.GetEnvVarCallH\x00R\tgetEnvVar\x127\n" +
	"\vset_env_var\x18# \x01(\v2\x15.kernel.SetEnvVarCallH\x00R\tsetEnvVar\x12)\n" +
	"\x05sleep\x18$ \x01(\v2\x11.kernel.SleepCallH\x00R\x05sleep\x126\n" +
	"\n" +
	"get_uptime\x18% \x01(\v2\x15.kernel.GetUptimeCallH\x00R\tgetUptime\x12F\n" +
	"\x10get_memory_stats\x18& \x01(\v2\x1a.kernel.GetMemoryStatsCallH\x00R\x0egetMemoryStats\x12\\\n" +
	"\x18get_process_memory_stats\x18' \x01(\v2!.kernel.GetProcessMemoryStatsCallH\x00R\x15getProcessMemoryStats\x126\n" +
	"\n" +
	"trigger_gc\x18) \x01(\v2\x15.kernel.TriggerGCCallH\x00R\ttriggerGc\x129\n" +
	"\vsend_signal\x18* \x01(\v2\x16.kernel.SendSignalCallH\x00R\n" +
	"sendSignal\x12E\n" +
	"\x0fnetwork_request\x18( \x01(\v2\x1a.kernel.NetworkRequestCallH\x00R\x0enetworkRequest\x12\\\n" +
	"\x17register_signal_handler\x18\x96\x01 \x01(\v2!.kernel.RegisterSignalHandlerCallH\x00R\x15registerSignalHandler\x12=\n" +
	"\fblock_signal\x18\x97\x01 \x01(\v2\x17.kernel.BlockSignalCallH\x00R\vblockSignal\x12C\n" +
	"\x0eunblock_signal\x18\x98\x01 \x01(\v2\x19.kernel.UnblockSignalCallH\x00R\runblockSignal\x12P\n" +
	"\x13get_pending_signals\x18\x99\x01 \x01(\v2\x1d.kernel.GetPendingSignalsCallH\x00R\x11getPendingSignals\x12G\n" +
	"\x10get_signal_stats\x18\x9a\x01 \x01(\v2\x1a.kernel.GetSignalStatsCallH\x00R\x0egetSignalStats\x12D\n" +
	"\x0fwait_for_signal\x18\x9b\x01 \x01(\v2\x19.kernel.WaitForSignalCallH\x00R\rwaitForSignal\x12G\n" +
	"\x10get_signal_state\x18\x9c\x01 \x01(\v2\x1a.kernel.GetSignalStateCallH\x00R\x0egetSignalState\x12,\n" +
	"\x06socket\x18x \x01(\v2\x12.kernel.SocketCallH\x00R\x06socket\x12&\n" +
	"\x04bind\x18y \x01(\v2\x10.kernel.BindCallH\x00R\x04bind\x12,\n" +
	"\x06listen\x18z \x01(\v2\x12.kernel.ListenCallH\x00R\x06listen\x12,\n" +
	"\x06accept\x18{ \x01(\v2\x12.kernel.AcceptCallH\x00R\x06accept\x12/\n" +
	"\aconnect\x18| \x01(\v2\x13.kernel.ConnectCallH\x00R\aconnect\x12&\n" +
	"\x04send\x18} \x01(\v2\x10.kernel.SendCallH\x00R\x04send\x12&\n" +
	"\x04recv\x18~ \x01(\v2\x10.kernel.RecvCallH\x00R\x04recv\x12-\n" +
	"\asend_to\x18\x7f \x01(\v2\x12.kernel.SendToCallH\x00R\x06sendTo\x124\n" +
	"\trecv_from\x18\x80\x01 \x01(\v2\x14.kernel.RecvFromCallH\x00R\brecvFrom\x12=\n" +
	"\fclose_socket\x18\x81\x01 \x01(\v2\x17.kernel.CloseSocketCallH\x00R\vcloseSocket\x12;\n" +
	"\fset_sock_opt\x18\x82\x01 \x01(\v2\x16.kernel.SetSockOptCallH\x00R\n" +
	"setSockOpt\x12;\n" +
	"\fget_sock_opt\x18\x83\x01 \x01(\v2\x16.kernel.GetSockOptCallH\x00R\n" +
	"getSockOpt\x12&\n" +
	"\x04open\x18d \x01(\v2\x10.kernel.OpenCallH\x00R\x04open\x12)\n" +
	"\x05close\x18e \x01(\v2\x11.kernel.CloseCallH\x00R\x05close\x12#\n" +
	"\x03dup\x18f \x01(\v2\x0f.kernel.DupCallH\x00R\x03dup\x12&\n" +
	"\x04dup2\x18g \x01(\v2\x10.kernel.Dup2CallH\x00R\x04dup2\x12)\n" +
	"\x05lseek\x18h \x01(\v2\x11.kernel.LseekCallH\x00R\x05lseek\x12)\n" +
	"\x05fcntl\x18i \x01(\v2\x11.kernel.FcntlCallH\x00R\x05fcntl\x129\n" +
	"\vcreate_pipe\x182 \x01(\v2\x16.kernel.CreatePipeCallH\x00R\n" +
	"createPipe\x126\n" +
	"\n" +
	"write_pipe\x183 \x01(\v2\x15.kernel.WritePipeCallH\x00R\twritePipe\x123\n" +
	"\tread_pipe\x184 \x01(\v2\x14.kernel.ReadPipeCallH\x00R\breadPipe\x126\n" +
	"\n" +
	"close_pipe\x185 \x01(\v2\x15.kernel.ClosePipeCallH\x00R\tclosePipe\x12<\n" +
	"\fdestroy_pipe\x186 \x01(\v2\x17.kernel.DestroyPipeCallH\x00R\vdestroyPipe\x126\n" +
	"\n" +
	"pipe_stats\x187 \x01(\v2\x15.kernel.PipeStatsCallH\x00R\tpipeStats\x126\n" +
	"\n" +
	"create_shm\x18< \x01(\v2\x15.kernel.CreateShmCallH\x00R\tcreateShm\x126\n" +
	"\n" +
	"attach_shm\x18= \x01(\v2\x15.kernel.AttachShmCallH\x00R\tattachShm\x126\n" +
	"\n" +
	"detach_shm\x18> \x01(\v2\x15.kernel.DetachShmCallH\x00R\tdetachShm\x123\n" +
	"\twrite_shm\x18? \x01(\v2\x14.kernel.WriteShmCallH\x00R\bwriteShm\x120\n" +
	"\bread_shm\x18@ \x01(\v2\x13.kernel.ReadShmCallH\x00R\areadShm\x129\n" +
	"\vdestroy_shm\x18A \x01(\v2\x16.kernel.DestroyShmCallH\x00R\n" +
	"destroyShm\x123\n" +
	"\tshm_stats\x18B \x01(\v2\x14.kernel.ShmStatsCallH\x00R\bshmStats\x12&\n" +
	"\x04mmap\x18C \x01(\v2\x10.kernel.MmapCallH\x00R\x04mmap\x123\n" +
	"\tmmap_read\x18D \x01(\v2\x14.kernel.MmapReadCallH\x00R\bmmapRead\x126\n" +
	"\n" +
	"mmap_write\x18E \x01(\v2\x15.kernel.MmapWriteCallH\x00R\tmmapWrite\x12*\n" +
	"\x05msync\x18\x8c\x01 \x01(\v2\x11.kernel.MsyncCallH\x00R\x05msync\x12-\n" +
	"\x06munmap\x18\x8d\x01 \x01(\v2\x12.kernel.MunmapCallH\x00R\x06munmap\x127\n" +
	"\n" +
	"mmap_stats\x18\x8e\x01 \x01(\v2\x15.kernel.MmapStatsCallH\x00R\tmmapStats\x12<\n" +
	"\fcreate_queue\x18n \x01(\v2\x17.kernel.CreateQueueCallH\x00R\vcreateQueue\x126\n" +
	"\n" +
	"send_queue\x18o \x01(\v2\x15.kernel.SendQueueCallH\x00R\tsendQueue\x12?\n" +
	"\rreceive_queue\x18p \x01(\v2\x18.kernel.ReceiveQueueCallH\x00R\freceiveQueue\x12E\n" +
	"\x0fsubscribe_queue\x18q \x01(\v2\x1a.kernel.SubscribeQueueCallH\x00R\x0esubscribeQueue\x12K\n" +
	"\x11unsubscribe_queue\x18r \x01(\v2\x1c.kernel.UnsubscribeQueueCallH\x00R\x10unsubscribeQueue\x129\n" +
	"\vclose_queue\x18s \x01(\v2\x16.kernel.CloseQueueCallH\x00R\n" +
	"closeQueue\x12?\n" +
	"\rdestroy_queue\x18t \x01(\v2\x18.kernel.DestroyQueueCallH\x00R\fdestroyQueue\x129\n" +
	"\vqueue_stats\x18u \x01(\v2\x16.kernel.QueueStatsCallH\x00R\n" +
	"queueStats\x12?\n" +
	"\rschedule_next\x18F \x01(\v2\x18.kernel.ScheduleNextCallH\x00R\fscheduleNext\x12?\n" +
	"\ryield_process\x18G \x01(\v2\x18.kernel.YieldProcessCallH\x00R\fyieldProcess\x12U\n" +
	"\x15get_current_scheduled\x18H \x01(\v2\x1f.kernel.GetCurrentScheduledCallH\x00R\x13getCurrentScheduled\x12O\n" +
	"\x13get_scheduler_stats\x18I \x01(\v2\x1d.kernel.GetSchedulerStatsCallH\x00R\x11getSchedulerStats\x12U\n" +
	"\x15set_scheduling_policy\x18J \x01(\v2\x1f.kernel.SetSchedulingPolicyCallH\x00R\x13setSchedulingPolicy\x12U\n" +
	"\x15get_scheduling_policy\x18K \x01(\v2\x1f.kernel.GetSchedulingPolicyCallH\x00R\x13getSchedulingPolicy\x12F\n" +
	"\x10set_time_quantum\x18L \x01(\v2\x1a.kernel.SetTimeQuantumCallH\x00R\x0esetTimeQuantum\x12F\n" +
	"\x10get_time_quantum\x18M \x01(\v2\x1a.kernel.GetTimeQuantumCallH\x00R\x0egetTimeQuantum\x12e\n" +
	"\x1bget_process_scheduler_stats\x18N \x01(\v2$.kernel.GetProcessSchedulerStatsCallH\x00R\x18getProcessSchedulerStats\x12o\n" +
	"\x1fget_all_process_scheduler_stats\x18O \x01(\v2'.kernel.GetAllProcessSchedulerStatsCallH\x00R\x1bgetAllProcessSchedulerStats\x12B\n" +
	"\x0eboost_priority\x18Q \x01(\v2\x19.kernel.BoostPriorityCallH\x00R\rboostPriority\x12B\n" +
	"\x0elower_priority\x18R \x01(\v2\x19.kernel.LowerPriorityCallH\x00R\rlowerPriorityB\t\n" +
	"\asyscall\"\xca\x01\n" +
	"\x0fSyscallResponse\x121\n" +
	"\asuccess\x18\x01 \x01(\v2\x15.kernel.SuccessResultH\x00R\asuccess\x12+\n" +
	"\x05error\x18\x02 \x01(\v2\x13.kernel.ErrorResultH\x00R\x05error\x12M\n" +
	"\x11permission_denied\x18\x03 \x01(\v2\x1e.kernel.PermissionDeniedResultH\x00R\x10permissionDeniedB\b\n" +
	"\x06result\"#\n" +
	"\rSuccessResult\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"'\n" +
	"\vErrorResult\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"0\n" +
	"\x16PermissionDeniedResult\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\"\"\n" +
	"\fReadFileCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"7\n" +
	"\rWriteFileCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"$\n" +
	"\x0eCreateFileCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"$\n" +
	"\x0eDeleteFileCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"'\n" +
	"\x11ListDirectoryCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"$\n" +
	"\x0eFileExistsCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\"\n" +
	"\fFileStatCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"H\n" +
	"\fMoveFileCall\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12 \n" +
	"\vdestination\x18\x02 \x01(\tR\vdestination\"H\n" +
	"\fCopyFileCall\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12 \n" +
	"\vdestination\x18\x02 \x01(\tR\vdestination\")\n" +
	"\x13CreateDirectoryCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\")\n" +
	"\x13RemoveDirectoryCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x19\n" +
	"\x17GetWorkingDirectoryCall\"-\n" +
	"\x17SetWorkingDirectoryCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\":\n" +
	"\x10TruncateFileCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x04R\x04size\"@\n" +
	"\x10SpawnProcessCall\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\"0\n" +
	"\x0fKillProcessCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"3\n" +
	"\x12GetProcessInfoCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"\x14\n" +
	"\x12GetProcessListCall\"S\n" +
	"\x16SetProcessPriorityCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\rR\bpriority\"4\n" +
	"\x13GetProcessStateCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"4\n" +
	"\x13GetProcessStatsCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"c\n" +
	"\x0fWaitProcessCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\x12\"\n" +
	"\n" +
	"timeout_ms\x18\x02 \x01(\x04H\x00R\ttimeoutMs\x88\x01\x01B\r\n" +
	"\v_timeout_ms\"\x13\n" +
	"\x11GetSystemInfoCall\"\x14\n" +
	"\x12GetCurrentTimeCall\"!\n" +
	"\rGetEnvVarCall\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\"7\n" +
	"\rSetEnvVarCall\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\",\n" +
	"\tSleepCall\x12\x1f\n" +
	"\vduration_ms\x18\x01 \x01(\x04R\n" +
	"durationMs\"\x0f\n" +
	"\rGetUptimeCall\"\x14\n" +
	"\x12GetMemoryStatsCall\":\n" +
	"\x19GetProcessMemoryStatsCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"B\n" +
	"\rTriggerGCCall\x12\"\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rH\x00R\ttargetPid\x88\x01\x01B\r\n" +
	"\v_target_pid\"G\n" +
	"\x0eSendSignalCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\x12\x16\n" +
	"\x06signal\x18\x02 \x01(\rR\x06signal\"R\n" +
	"\x19RegisterSignalHandlerCall\x12\x16\n" +
	"\x06signal\x18\x01 \x01(\rR\x06signal\x12\x1d\n" +
	"\n" +
	"handler_id\x18\x02 \x01(\rR\thandlerId\")\n" +
	"\x0fBlockSignalCall\x12\x16\n" +
	"\x06signal\x18\x01 \x01(\rR\x06signal\"+\n" +
	"\x11UnblockSignalCall\x12\x16\n" +
	"\x06signal\x18\x01 \x01(\rR\x06signal\"\x17\n" +
	"\x15GetPendingSignalsCall\"\x14\n" +
	"\x12GetSignalStatsCall\"`\n" +
	"\x11WaitForSignalCall\x12\x18\n" +
	"\asignals\x18\x01 \x03(\rR\asignals\x12\"\n" +
	"\n" +
	"timeout_ms\x18\x02 \x01(\x04H\x00R\ttimeoutMs\x88\x01\x01B\r\n" +
	"\v_timeout_ms\"G\n" +
	"\x12GetSignalStateCall\x12\"\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rH\x00R\ttargetPid\x88\x01\x01B\r\n" +
	"\v_target_pid\"&\n" +
	"\x12NetworkRequestCall\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\"a\n" +
	"\n" +
	"SocketCall\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\rR\x06domain\x12\x1f\n" +
	"\vsocket_type\x18\x02 \x01(\rR\n" +
	"socketType\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\rR\bprotocol\"<\n" +
	"\bBindCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\">\n" +
	"\n" +
	"ListenCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x18\n" +
	"\abacklog\x18\x02 \x01(\rR\abacklog\"$\n" +
	"\n" +
	"AcceptCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\"?\n" +
	"\vConnectCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"L\n" +
	"\bSendCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\rR\x05flags\"L\n" +
	"\bRecvCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\rR\x05flags\"h\n" +
	"\n" +
	"SendToCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x14\n" +
	"\x05flags\x18\x04 \x01(\rR\x05flags\"P\n" +
	"\fRecvFromCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\rR\x05flags\")\n" +
	"\x0fCloseSocketCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\"p\n" +
	"\x0eSetSockOptCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x14\n" +
	"\x05level\x18\x02 \x01(\rR\x05level\x12\x18\n" +
	"\aoptname\x18\x03 \x01(\rR\aoptname\x12\x16\n" +
	"\x06optval\x18\x04 \x01(\fR\x06optval\"X\n" +
	"\x0eGetSockOptCall\x12\x16\n" +
	"\x06sockfd\x18\x01 \x01(\rR\x06sockfd\x12\x14\n" +
	"\x05level\x18\x02 \x01(\rR\x05level\x12\x18\n" +
	"\aoptname\x18\x03 \x01(\rR\aoptname\"H\n" +
	"\bOpenCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\rR\x05flags\x12\x12\n" +
	"\x04mode\x18\x03 \x01(\rR\x04mode\"\x1b\n" +
	"\tCloseCall\x12\x0e\n" +
	"\x02fd\x18\x01 \x01(\rR\x02fd\"\x19\n" +
	"\aDupCall\x12\x0e\n" +
	"\x02fd\x18\x01 \x01(\rR\x02fd\"6\n" +
	"\bDup2Call\x12\x14\n" +
	"\x05oldfd\x18\x01 \x01(\rR\x05oldfd\x12\x14\n" +
	"\x05newfd\x18\x02 \x01(\rR\x05newfd\"K\n" +
	"\tLseekCall\x12\x0e\n" +
	"\x02fd\x18\x01 \x01(\rR\x02fd\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x16\n" +
	"\x06whence\x18\x03 \x01(\rR\x06whence\"?\n" +
	"\tFcntlCall\x12\x0e\n" +
	"\x02fd\x18\x01 \x01(\rR\x02fd\x12\x10\n" +
	"\x03cmd\x18\x02 \x01(\rR\x03cmd\x12\x10\n" +
	"\x03arg\x18\x03 \x01(\rR\x03arg\"|\n" +
	"\x0eCreatePipeCall\x12\x1d\n" +
	"\n" +
	"reader_pid\x18\x01 \x01(\rR\treaderPid\x12\x1d\n" +
	"\n" +
	"writer_pid\x18\x02 \x01(\rR\twriterPid\x12\x1f\n" +
	"\bcapacity\x18\x03 \x01(\rH\x00R\bcapacity\x88\x01\x01B\v\n" +
	"\t_capacity\"<\n" +
	"\rWritePipeCall\x12\x17\n" +
	"\apipe_id\x18\x01 \x01(\rR\x06pipeId\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\";\n" +
	"\fReadPipeCall\x12\x17\n" +
	"\apipe_id\x18\x01 \x01(\rR\x06pipeId\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\"(\n" +
	"\rClosePipeCall\x12\x17\n" +
	"\apipe_id\x18\x01 \x01(\rR\x06pipeId\"*\n" +
	"\x0fDestroyPipeCall\x12\x17\n" +
	"\apipe_id\x18\x01 \x01(\rR\x06pipeId\"(\n" +
	"\rPipeStatsCall\x12\x17\n" +
	"\apipe_id\x18\x01 \x01(\rR\x06pipeId\"#\n" +
	"\rCreateShmCall\x12\x12\n" +
	"\x04size\x18\x01 \x01(\rR\x04size\"K\n" +
	"\rAttachShmCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\x12\x1b\n" +
	"\tread_only\x18\x02 \x01(\bR\breadOnly\".\n" +
	"\rDetachShmCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\"Y\n" +
	"\fWriteShmCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"X\n" +
	"\vReadShmCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\rR\x04size\"/\n" +
	"\x0eDestroyShmCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\"-\n" +
	"\fShmStatsCall\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\rR\tsegmentId\"z\n" +
	"\bMmapCall\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x16\n" +
	"\x06length\x18\x03 \x01(\rR\x06length\x12\x12\n" +
	"\x04prot\x18\x04 \x01(\rR\x04prot\x12\x16\n" +
	"\x06shared\x18\x05 \x01(\bR\x06shared\"W\n" +
	"\fMmapReadCall\x12\x17\n" +
	"\ammap_id\x18\x01 \x01(\rR\x06mmapId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x16\n" +
	"\x06length\x18\x03 \x01(\rR\x06length\"T\n" +
	"\rMmapWriteCall\x12\x17\n" +
	"\ammap_id\x18\x01 \x01(\rR\x06mmapId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"$\n" +
	"\tMsyncCall\x12\x17\n" +
	"\ammap_id\x18\x01 \x01(\rR\x06mmapId\"%\n" +
	"\n" +
	"MunmapCall\x12\x17\n" +
	"\ammap_id\x18\x01 \x01(\rR\x06mmapId\"(\n" +
	"\rMmapStatsCall\x12\x17\n" +
	"\ammap_id\x18\x01 \x01(\rR\x06mmapId\"^\n" +
	"\x0fCreateQueueCall\x12\x1d\n" +
	"\n" +
	"queue_type\x18\x01 \x01(\tR\tqueueType\x12\x1f\n" +
	"\bcapacity\x18\x02 \x01(\rH\x00R\bcapacity\x88\x01\x01B\v\n" +
	"\t_capacity\"l\n" +
	"\rSendQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x1f\n" +
	"\bpriority\x18\x03 \x01(\rH\x00R\bpriority\x88\x01\x01B\v\n" +
	"\t_priority\"-\n" +
	"\x10ReceiveQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"/\n" +
	"\x12SubscribeQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"1\n" +
	"\x14UnsubscribeQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"+\n" +
	"\x0eCloseQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"-\n" +
	"\x10DestroyQueueCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"+\n" +
	"\x0eQueueStatsCall\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\"\x12\n" +
	"\x10ScheduleNextCall\"\x12\n" +
	"\x10YieldProcessCall\"\x19\n" +
	"\x17GetCurrentScheduledCall\"\x17\n" +
	"\x15GetSchedulerStatsCall\"1\n" +
	"\x17SetSchedulingPolicyCall\x12\x16\n" +
	"\x06policy\x18\x01 \x01(\tR\x06policy\"\x19\n" +
	"\x17GetSchedulingPolicyCall\";\n" +
	"\x12SetTimeQuantumCall\x12%\n" +
	"\x0equantum_micros\x18\x01 \x01(\x04R\rquantumMicros\"\x14\n" +
	"\x12GetTimeQuantumCall\"=\n" +
	"\x1cGetProcessSchedulerStatsCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"!\n" +
	"\x1fGetAllProcessSchedulerStatsCall\"2\n" +
	"\x11BoostPriorityCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"2\n" +
	"\x11LowerPriorityCall\x12\x1d\n" +
	"\n" +
	"target_pid\x18\x01 \x01(\rR\ttargetPid\"\xdb\x01\n" +
	"\x14CreateProcessRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\rR\bpriority\x129\n" +
	"\rsandbox_level\x18\x03 \x01(\x0e2\x14.kernel.SandboxLevelR\fsandboxLevel\x12\x1d\n" +
	"\acommand\x18\x04 \x01(\tH\x00R\acommand\x88\x01\x01\x12\x12\n" +
	"\x04args\x18\x05 \x03(\tR\x04args\x12\x19\n" +
	"\benv_vars\x18\x06 \x03(\tR\aenvVarsB\n" +
	"\n" +
	"\b_command\"\x80\x01\n" +
	"\x15CreateProcessResponse\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x1a\n" +
	"\x06os_pid\x18\x04 \x01(\rH\x00R\x05osPid\x88\x01\x01B\t\n" +
	"\a_os_pid\"\xda\x01\n" +
	"\x14UpdateSandboxRequest\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x126\n" +
	"\fcapabilities\x18\x02 \x03(\x0e2\x12.kernel.CapabilityR\fcapabilities\x12#\n" +
	"\rallowed_paths\x18\x03 \x03(\tR\fallowedPaths\x12#\n" +
	"\rblocked_paths\x18\x04 \x03(\tR\fblockedPaths\x12.\n" +
	"\x06limits\x18\x05 \x01(\v2\x16.kernel.ResourceLimitsR\x06limits\"G\n" +
	"\x15UpdateSandboxResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\xf0\x01\n" +
	"\x0eResourceLimits\x12(\n" +
	"\x10max_memory_bytes\x18\x01 \x01(\x04R\x0emaxMemoryBytes\x12%\n" +
	"\x0fmax_cpu_time_ms\x18\x02 \x01(\x04R\fmaxCpuTimeMs\x120\n" +
	"\x14max_file_descriptors\x18\x03 \x01(\rR\x12maxFileDescriptors\x12#\n" +
	"\rmax_processes\x18\x04 \x01(\rR\fmaxProcesses\x126\n" +
	"\x17max_network_connections\x18\x05 \x01(\rR\x15maxNetworkConnections\"5\n" +
	"\x12EventStreamRequest\x12\x1f\n" +
	"\vevent_types\x18\x01 \x03(\tR\n" +
	"eventTypes\"\xb1\x03\n" +
	"\vKernelEvent\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12F\n" +
	"\x0fprocess_created\x18\n" +
	" \x01(\v2\x1b.kernel.ProcessCreatedEventH\x00R\x0eprocessCreated\x12O\n" +
	"\x12process_terminated\x18\v \x01(\v2\x1e.kernel.ProcessTerminatedEventH\x00R\x11processTerminated\x12I\n" +
	"\x10syscall_executed\x18\f \x01(\v2\x1c.kernel.SyscallExecutedEventH\x00R\x0fsyscallExecuted\x12L\n" +
	"\x11permission_denied\x18\r \x01(\v2\x1d.kernel.PermissionDeniedEventH\x00R\x10permissionDenied\x12I\n" +
	"\x10resource_cleanup\x18\x0e \x01(\v2\x1c.kernel.ResourceCleanupEventH\x00R\x0fresourceCleanupB\a\n" +
	"\x05event\";\n" +
	"\x13ProcessCreatedEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"G\n" +
	"\x16ProcessTerminatedEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x1b\n" +
	"\texit_code\x18\x02 \x01(\x05R\bexitCode\"e\n" +
	"\x14SyscallExecutedEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12!\n" +
	"\fsyscall_type\x18\x02 \x01(\tR\vsyscallType\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\"d\n" +
	"\x15PermissionDeniedEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12!\n" +
	"\fsyscall_type\x18\x02 \x01(\tR\vsyscallType\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\xf0\x01\n" +
	"\x14ResourceCleanupEvent\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12'\n" +
	"\x0fresources_freed\x18\x02 \x01(\x04R\x0eresourcesFreed\x12\x1f\n" +
	"\vbytes_freed\x18\x03 \x01(\x04R\n" +
	"bytesFreed\x12.\n" +
	"\x13cleanup_duration_us\x18\x04 \x01(\x04R\x11cleanupDurationUs\x124\n" +
	"\aby_type\x18\x05 \x03(\v2\x1b.kernel.ResourceTypeCleanupR\x06byType\x12\x16\n" +
	"\x06errors\x18\x06 \x03(\tR\x06errors\"P\n" +
	"\x13ResourceTypeCleanup\x12#\n" +
	"\rresource_type\x18\x01 \x01(\tR\fresourceType\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x04R\x05count\"\x15\n" +
	"\x13ScheduleNextRequest\"s\n" +
	"\x14ScheduleNextResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1e\n" +
	"\bnext_pid\x18\x02 \x01(\rH\x00R\anextPid\x88\x01\x01\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05errorB\v\n" +
	"\t_next_pid\"\x1a\n" +
	"\x18GetSchedulerStatsRequest\"y\n" +
	"\x19GetSchedulerStatsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12,\n" +
	"\x05stats\x18\x02 \x01(\v2\x16.kernel.SchedulerStatsR\x05stats\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\xf0\x01\n" +
	"\x0eSchedulerStats\x12'\n" +
	"\x0ftotal_scheduled\x18\x01 \x01(\x04R\x0etotalScheduled\x12)\n" +
	"\x10context_switches\x18\x02 \x01(\x04R\x0fcontextSwitches\x12 \n" +
	"\vpreemptions\x18\x03 \x01(\x04R\vpreemptions\x12)\n" +
	"\x10active_processes\x18\x04 \x01(\rR\x0factiveProcesses\x12\x16\n" +
	"\x06policy\x18\x05 \x01(\tR\x06policy\x12%\n" +
	"\x0equantum_micros\x18\x06 \x01(\x04R\rquantumMicros\"4\n" +
	"\x1aSetSchedulingPolicyRequest\x12\x16\n" +
	"\x06policy\x18\x01 \x01(\tR\x06policy\"M\n" +
	"\x1bSetSchedulingPolicyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x92\x01\n" +
	"\x14StreamSyscallRequest\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12,\n" +
	"\x04read\x18\x02 \x01(\v2\x16.kernel.StreamFileReadH\x00R\x04read\x12/\n" +
	"\x05write\x18\x03 \x01(\v2\x17.kernel.StreamFileWriteH\x00R\x05writeB\t\n" +
	"\arequest\"C\n" +
	"\x0eStreamFileRead\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\rR\tchunkSize\"S\n" +
	"\x0fStreamFileWrite\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05chunk\x18\x02 \x01(\fR\x05chunk\x12\x16\n" +
	"\x06finish\x18\x03 \x01(\bR\x06finish\"\x81\x01\n" +
	"\x12StreamSyscallChunk\x12\x14\n" +
	"\x04data\x18\x01 \x01(\fH\x00R\x04data\x12\x16\n" +
	"\x05error\x18\x02 \x01(\tH\x00R\x05error\x124\n" +
	"\bcomplete\x18\x03 \x01(\v2\x16.kernel.StreamCompleteH\x00R\bcompleteB\a\n" +
	"\x05chunk\"1\n" +
	"\x0eStreamComplete\x12\x1f\n" +
	"\vtotal_bytes\x18\x01 \x01(\x04R\n" +
	"totalBytes\"a\n" +
	"\x14AsyncSyscallResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1a\n" +
	"\baccepted\x18\x02 \x01(\bR\baccepted\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"-\n" +
	"\x12AsyncStatusRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"\xec\x01\n" +
	"\x13AsyncStatusResponse\x12:\n" +
	"\x06status\x18\x01 \x01(\x0e2\".kernel.AsyncStatusResponse.StatusR\x06status\x12/\n" +
	"\x06result\x18\x02 \x01(\v2\x17.kernel.SyscallResponseR\x06result\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x02R\bprogress\"L\n" +
	"\x06Status\x12\v\n" +
	"\aPENDING\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\r\n" +
	"\tCOMPLETED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\x12\r\n" +
	"\tCANCELLED\x10\x04\"-\n" +
	"\x12AsyncCancelRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"I\n" +
	"\x13AsyncCancelResponse\x12\x1c\n" +
	"\tcancelled\x18\x01 \x01(\bR\tcancelled\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"e\n" +
	"\x13BatchSyscallRequest\x122\n" +
	"\brequests\x18\x01 \x03(\v2\x16.kernel.SyscallRequestR\brequests\x12\x1a\n" +
	"\bparallel\x18\x02 \x01(\bR\bparallel\"\x97\x01\n" +
	"\x14BatchSyscallResponse\x125\n" +
	"\tresponses\x18\x01 \x03(\v2\x17.kernel.SyscallResponseR\tresponses\x12#\n" +
	"\rsuccess_count\x18\x02 \x01(\rR\fsuccessCount\x12#\n" +
	"\rfailure_count\x18\x03 \x01(\rR\ffailureCount\"S\n" +
	"\x16ReapCompletionsRequest\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12'\n" +
	"\x0fmax_completions\x18\x02 \x01(\rR\x0emaxCompletions\"l\n" +
	"\x17ReapCompletionsResponse\x12;\n" +
	"\vcompletions\x18\x01 \x03(\v2\x19.kernel.IoUringCompletionR\vcompletions\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"s\n" +
	"\x11IoUringCompletion\x12\x10\n" +
	"\x03seq\x18\x01 \x01(\x04R\x03seq\x12\x1b\n" +
	"\tuser_data\x18\x02 \x01(\x04R\buserData\x12/\n" +
	"\x06result\x18\x03 \x01(\v2\x17.kernel.SyscallResponseR\x06result\"f\n" +
	"\x14IoUringBatchResponse\x12\x1c\n" +
	"\tsequences\x18\x01 \x03(\x04R\tsequences\x12\x1a\n" +
	"\baccepted\x18\x02 \x01(\bR\baccepted\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error*9\n" +
	"\fSandboxLevel\x12\v\n" +
	"\aMINIMAL\x10\x00\x12\f\n" +
	"\bSTANDARD\x10\x01\x12\x0e\n" +
	"\n" +
	"PRIVILEGED\x10\x02*\xf2\x01\n" +
	"\n" +
	"Capability\x12\r\n" +
	"\tREAD_FILE\x10\x00\x12\x0e\n" +
	"\n" +
	"WRITE_FILE\x10\x01\x12\x0f\n" +
	"\vCREATE_FILE\x10\x02\x12\x0f\n" +
	"\vDELETE_FILE\x10\x03\x12\x12\n" +
	"\x0eLIST_DIRECTORY\x10\x04\x12\x11\n" +
	"\rSPAWN_PROCESS\x10\x05\x12\x10\n" +
	"\fKILL_PROCESS\x10\x06\x12\x12\n" +
	"\x0eNETWORK_ACCESS\x10\a\x12\r\n" +
	"\tBIND_PORT\x10\b\x12\x0f\n" +
	"\vSYSTEM_INFO\x10\t\x12\x0f\n" +
	"\vTIME_ACCESS\x10\n" +
	"\x12\x10\n" +
	"\fSEND_MESSAGE\x10\v\x12\x13\n" +
	"\x0fRECEIVE_MESSAGE\x10\f2\xab\t\n" +
	"\rKernelService\x12A\n" +
	"\x0eExecuteSyscall\x12\x16.kernel.SyscallRequest\x1a\x17.kernel.SyscallResponse\x12M\n" +
	"\rStreamSyscall\x12\x1c.kernel.StreamSyscallRequest\x1a\x1a.kernel.StreamSyscallChunk(\x010\x01\x12K\n" +
	"\x13ExecuteSyscallAsync\x12\x16.kernel.SyscallRequest\x1a\x1c.kernel.AsyncSyscallResponse\x12I\n" +
	"\x0eGetAsyncStatus\x12\x1a.kernel.AsyncStatusRequest\x1a\x1b.kernel.AsyncStatusResponse\x12F\n" +
	"\vCancelAsync\x12\x1a.kernel.AsyncCancelRequest\x1a\x1b.kernel.AsyncCancelResponse\x12P\n" +
	"\x13ExecuteSyscallBatch\x12\x1b.kernel.BatchSyscallRequest\x1a\x1c.kernel.BatchSyscallResponse\x12M\n" +
	"\x15ExecuteSyscallIouring\x12\x16.kernel.SyscallRequest\x1a\x1c.kernel.AsyncSyscallResponse\x12R\n" +
	"\x0fReapCompletions\x12\x1e.kernel.ReapCompletionsRequest\x1a\x1f.kernel.ReapCompletionsResponse\x12O\n" +
	"\x12SubmitIouringBatch\x12\x1b.kernel.BatchSyscallRequest\x1a\x1c.kernel.IoUringBatchResponse\x12L\n" +
	"\rCreateProcess\x12\x1c.kernel.CreateProcessRequest\x1a\x1d.kernel.CreateProcessResponse\x12L\n" +
	"\rUpdateSandbox\x12\x1c.kernel.UpdateSandboxRequest\x1a\x1d.kernel.UpdateSandboxResponse\x12I\n" +
	"\fScheduleNext\x12\x1b.kernel.ScheduleNextRequest\x1a\x1c.kernel.ScheduleNextResponse\x12X\n" +
	"\x11GetSchedulerStats\x12 .kernel.GetSchedulerStatsRequest\x1a!.kernel.GetSchedulerStatsResponse\x12^\n" +
	"\x13SetSchedulingPolicy\x12\".kernel.SetSchedulingPolicyRequest\x1a#.kernel.SetSchedulingPolicyResponse\x12A\n" +
	"\fStreamEvents\x12\x1a.kernel.EventStreamRequest\x1a\x13.kernel.KernelEvent0\x01B8Z6github.com/GriffinCanCode/AgentOS/backend/proto/kernelb\x06proto3"

var (
	file_kernel_proto_rawDescOnce sync.Once
	file_kernel_proto_rawDescData []byte
)

func file_kernel_proto_rawDescGZIP() []byte {
	file_kernel_proto_rawDescOnce.Do(func() {
		file_kernel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kernel_proto_rawDesc), len(file_kernel_proto_rawDesc)))
	})
	return file_kernel_proto_rawDescData
}

var file_kernel_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kernel_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_kernel_proto_goTypes = []any{
	(SandboxLevel)(0),                       // 0: kernel.SandboxLevel
	(Capability)(0),                         // 1: kernel.Capability
	(AsyncStatusResponse_Status)(0),         // 2: kernel.AsyncStatusResponse.Status
	(*SyscallRequest)(nil),                  // 3: kernel.SyscallRequest
	(*SyscallResponse)(nil),                 // 4: kernel.SyscallResponse
	(*SuccessResult)(nil),                   // 5: kernel.SuccessResult
	(*ErrorResult)(nil),                     // 6: kernel.ErrorResult
	(*PermissionDeniedResult)(nil),          // 7: kernel.PermissionDeniedResult
	(*ReadFileCall)(nil),                    // 8: kernel.ReadFileCall
	(*WriteFileCall)(nil),                   // 9: kernel.WriteFileCall
	(*CreateFileCall)(nil),                  // 10: kernel.CreateFileCall
	(*DeleteFileCall)(nil),                  // 11: kernel.DeleteFileCall
	(*ListDirectoryCall)(nil),               // 12: kernel.ListDirectoryCall
	(*FileExistsCall)(nil),                  // 13: kernel.FileExistsCall
	(*FileStatCall)(nil),                    // 14: kernel.FileStatCall
	(*MoveFileCall)(nil),                    // 15: kernel.MoveFileCall
	(*CopyFileCall)(nil),                    // 16: kernel.CopyFileCall
	(*CreateDirectoryCall)(nil),             // 17: kernel.CreateDirectoryCall
	(*RemoveDirectoryCall)(nil),             // 18: kernel.RemoveDirectoryCall
	(*GetWorkingDirectoryCall)(nil),         // 19: kernel.GetWorkingDirectoryCall
	(*SetWorkingDirectoryCall)(nil),         // 20: kernel.SetWorkingDirectoryCall
	(*TruncateFileCall)(nil),                // 21: kernel.TruncateFileCall
	(*SpawnProcessCall)(nil),                // 22: kernel.SpawnProcessCall
	(*KillProcessCall)(nil),                 // 23: kernel.KillProcessCall
	(*GetProcessInfoCall)(nil),              // 24: kernel.GetProcessInfoCall
	(*GetProcessListCall)(nil),              // 25: kernel.GetProcessListCall
	(*SetProcessPriorityCall)(nil),          // 26: kernel.SetProcessPriorityCall
	(*GetProcessStateCall)(nil),             // 27: kernel.GetProcessStateCall
	(*GetProcessStatsCall)(nil),             // 28: kernel.GetProcessStatsCall
	(*WaitProcessCall)(nil),                 // 29: kernel.WaitProcessCall
	(*GetSystemInfoCall)(nil),               // 30: kernel.GetSystemInfoCall
	(*GetCurrentTimeCall)(nil),              // 31: kernel.GetCurrentTimeCall
	(*GetEnvVarCall)(nil),                   // 32: kernel.GetEnvVarCall
	(*SetEnvVarCall)(nil),                   // 33: kernel.SetEnvVarCall
	(*SleepCall)(nil),                       // 34: kernel.SleepCall
	(*GetUptimeCall)(nil),                   // 35: kernel.GetUptimeCall
	(*GetMemoryStatsCall)(nil),              // 36: kernel.GetMemoryStatsCall
	(*GetProcessMemoryStatsCall)(nil),       // 37: kernel.GetProcessMemoryStatsCall
	(*TriggerGCCall)(nil),                   // 38: kernel.TriggerGCCall
	(*SendSignalCall)(nil),                  // 39: kernel.SendSignalCall
	(*RegisterSignalHandlerCall)(nil),       // 40: kernel.RegisterSignalHandlerCall
	(*BlockSignalCall)(nil),                 // 41: kernel.BlockSignalCall
	(*UnblockSignalCall)(nil),               // 42: kernel.UnblockSignalCall
	(*GetPendingSignalsCall)(nil),           // 43: kernel.GetPendingSignalsCall
	(*GetSignalStatsCall)(nil),              // 44: kernel.GetSignalStatsCall
	(*WaitForSignalCall)(nil),               // 45: kernel.WaitForSignalCall
	(*GetSignalStateCall)(nil),              // 46: kernel.GetSignalStateCall
	(*NetworkRequestCall)(nil),              // 47: kernel.NetworkRequestCall
	(*SocketCall)(nil),                      // 48: kernel.SocketCall
	(*BindCall)(nil),                        // 49: kernel.BindCall
	(*ListenCall)(nil),                      // 50: kernel.ListenCall
	(*AcceptCall)(nil),                      // 51: kernel.AcceptCall
	(*ConnectCall)(nil),                     // 52: kernel.ConnectCall
	(*SendCall)(nil),                        // 53: kernel.SendCall
	(*RecvCall)(nil),                        // 54: kernel.RecvCall
	(*SendToCall)(nil),                      // 55: kernel.SendToCall
	(*RecvFromCall)(nil),                    // 56: kernel.RecvFromCall
	(*CloseSocketCall)(nil),                 // 57: kernel.CloseSocketCall
	(*SetSockOptCall)(nil),                  // 58: kernel.SetSockOptCall
	(*GetSockOptCall)(nil),                  // 59: kernel.GetSockOptCall
	(*OpenCall)(nil),                        // 60: kernel.OpenCall
	(*CloseCall)(nil),                       // 61: kernel.CloseCall
	(*DupCall)(nil),                         // 62: kernel.DupCall
	(*Dup2Call)(nil),                        // 63: kernel.Dup2Call
	(*LseekCall)(nil),                       // 64: kernel.LseekCall
	(*FcntlCall)(nil),                       // 65: kernel.FcntlCall
	(*CreatePipeCall)(nil),                  // 66: kernel.CreatePipeCall
	(*WritePipeCall)(nil),                   // 67: kernel.WritePipeCall
	(*ReadPipeCall)(nil),                    // 68: kernel.ReadPipeCall
	(*ClosePipeCall)(nil),                   // 69: kernel.ClosePipeCall
	(*DestroyPipeCall)(nil),                 // 70: kernel.DestroyPipeCall
	(*PipeStatsCall)(nil),                   // 71: kernel.PipeStatsCall
	(*CreateShmCall)(nil),                   // 72: kernel.CreateShmCall
	(*AttachShmCall)(nil),                   // 73: kernel.AttachShmCall
	(*DetachShmCall)(nil),                   // 74: kernel.DetachShmCall
	(*WriteShmCall)(nil),                    // 75: kernel.WriteShmCall
	(*ReadShmCall)(nil),                     // 76: kernel.ReadShmCall
	(*DestroyShmCall)(nil),                  // 77: kernel.DestroyShmCall
	(*ShmStatsCall)(nil),                    // 78: kernel.ShmStatsCall
	(*MmapCall)(nil),                        // 79: kernel.MmapCall
	(*MmapReadCall)(nil),                    // 80: kernel.MmapReadCall
	(*MmapWriteCall)(nil),                   // 81: kernel.MmapWriteCall
	(*MsyncCall)(nil),                       // 82: kernel.MsyncCall
	(*MunmapCall)(nil),                      // 83: kernel.MunmapCall
	(*MmapStatsCall)(nil),                   // 84: kernel.MmapStatsCall
	(*CreateQueueCall)(nil),                 // 85: kernel.CreateQueueCall
	(*SendQueueCall)(nil),                   // 86: kernel.SendQueueCall
	(*ReceiveQueueCall)(nil),                // 87: kernel.ReceiveQueueCall
	(*SubscribeQueueCall)(nil),              // 88: kernel.SubscribeQueueCall
	(*UnsubscribeQueueCall)(nil),            // 89: kernel.UnsubscribeQueueCall
	(*CloseQueueCall)(nil),                  // 90: kernel.CloseQueueCall
	(*DestroyQueueCall)(nil),                // 91: kernel.DestroyQueueCall
	(*QueueStatsCall)(nil),                  // 92: kernel.QueueStatsCall
	(*ScheduleNextCall)(nil),                // 93: kernel.ScheduleNextCall
	(*YieldProcessCall)(nil),                // 94: kernel.YieldProcessCall
	(*GetCurrentScheduledCall)(nil),         // 95: kernel.GetCurrentScheduledCall
	(*GetSchedulerStatsCall)(nil),           // 96: kernel.GetSchedulerStatsCall
	(*SetSchedulingPolicyCall)(nil),         // 97: kernel.SetSchedulingPolicyCall
	(*GetSchedulingPolicyCall)(nil),         // 98: kernel.GetSchedulingPolicyCall
	(*SetTimeQuantumCall)(nil),              // 99: kernel.SetTimeQuantumCall
	(*GetTimeQuantumCall)(nil),              // 100: kernel.GetTimeQuantumCall
	(*GetProcessSchedulerStatsCall)(nil),    // 101: kernel.GetProcessSchedulerStatsCall
	(*GetAllProcessSchedulerStatsCall)(nil), // 102: kernel.GetAllProcessSchedulerStatsCall
	(*BoostPriorityCall)(nil),               // 103: kernel.BoostPriorityCall
	(*LowerPriorityCall)(nil),               // 104: kernel.LowerPriorityCall
	(*CreateProcessRequest)(nil),            // 105: kernel.CreateProcessRequest
	(*CreateProcessResponse)(nil),           // 106: kernel.CreateProcessResponse
	(*UpdateSandboxRequest)(nil),            // 107: kernel.UpdateSandboxRequest
	(*UpdateSandboxResponse)(nil),           // 108: kernel.UpdateSandboxResponse
	(*ResourceLimits)(nil),                  // 109: kernel.ResourceLimits
	(*EventStreamRequest)(nil),              // 110: kernel.EventStreamRequest
	(*KernelEvent)(nil),                     // 111: kernel.KernelEvent
	(*ProcessCreatedEvent)(nil),             // 112: kernel.ProcessCreatedEvent
	(*ProcessTerminatedEvent)(nil),          // 113: kernel.ProcessTerminatedEvent
	(*SyscallExecutedEvent)(nil),            // 114: kernel.SyscallExecutedEvent
	(*PermissionDeniedEvent)(nil),           // 115: kernel.PermissionDeniedEvent
	(*ResourceCleanupEvent)(nil),            // 116: kernel.ResourceCleanupEvent
	(*ResourceTypeCleanup)(nil),             // 117: kernel.ResourceTypeCleanup
	(*ScheduleNextRequest)(nil),             // 118: kernel.ScheduleNextRequest
	(*ScheduleNextResponse)(nil),            // 119: kernel.ScheduleNextResponse
	(*GetSchedulerStatsRequest)(nil),        // 120: kernel.GetSchedulerStatsRequest
	(*GetSchedulerStatsResponse)(nil),       // 121: kernel.GetSchedulerStatsResponse
	(*SchedulerStats)(nil),                  // 122: kernel.SchedulerStats
	(*SetSchedulingPolicyRequest)(nil),      // 123: kernel.SetSchedulingPolicyRequest
	(*SetSchedulingPolicyResponse)(nil),     // 124: kernel.SetSchedulingPolicyResponse
	(*StreamSyscallRequest)(nil),            // 125: kernel.StreamSyscallRequest
	(*StreamFileRead)(nil),                  // 126: kernel.StreamFileRead
	(*StreamFileWrite)(nil),                 // 127: kernel.StreamFileWrite
	(*StreamSyscallChunk)(nil),              // 128: kernel.StreamSyscallChunk
	(*StreamComplete)(nil),                  // 129: kernel.StreamComplete
	(*AsyncSyscallResponse)(nil),            // 130: kernel.AsyncSyscallResponse
	(*AsyncStatusRequest)(nil),              // 131: kernel.AsyncStatusRequest
	(*AsyncStatusResponse)(nil),             // 132: kernel.AsyncStatusResponse
	(*AsyncCancelRequest)(nil),              // 133: kernel.AsyncCancelRequest
	(*AsyncCancelResponse)(nil),             // 134: kernel.AsyncCancelResponse
	(*BatchSyscallRequest)(nil),             // 135: kernel.BatchSyscallRequest
	(*BatchSyscallResponse)(nil),            // 136: kernel.BatchSyscallResponse
	(*ReapCompletionsRequest)(nil),          // 137: kernel.ReapCompletionsRequest
	(*ReapCompletionsResponse)(nil),         // 138: kernel.ReapCompletionsResponse
	(*IoUringCompletion)(nil),               // 139: kernel.IoUringCompletion
	(*IoUringBatchResponse)(nil),            // 140: kernel.IoUringBatchResponse
}
var file_kernel_proto_depIdxs = []int32{
	8,   // 0: kernel.SyscallRequest.read_file:type_name -> kernel.ReadFileCall
	9,   // 1: kernel.SyscallRequest.write_file:type_name -> kernel.WriteFileCall
	10,  // 2: kernel.SyscallRequest.create_file:type_name -> kernel.CreateFileCall
	11,  // 3: kernel.SyscallRequest.delete_file:type_name -> kernel.DeleteFileCall
	12,  // 4: kernel.SyscallRequest.list_directory:type_name -> kernel.ListDirectoryCall
	13,  // 5: kernel.SyscallRequest.file_exists:type_name -> kernel.FileExistsCall
	14,  // 6: kernel.SyscallRequest.file_stat:type_name -> kernel.FileStatCall
	15,  // 7: kernel.SyscallRequest.move_file:type_name -> kernel.MoveFileCall
	16,  // 8: kernel.SyscallRequest.copy_file:type_name -> kernel.CopyFileCall
	17,  // 9: kernel.SyscallRequest.create_directory:type_name -> kernel.CreateDirectoryCall
	18,  // 10: kernel.SyscallRequest.remove_directory:type_name -> kernel.RemoveDirectoryCall
	19,  // 11: kernel.SyscallRequest.get_working_directory:type_name -> kernel.GetWorkingDirectoryCall
	20,  // 12: kernel.SyscallRequest.set_working_directory:type_name -> kernel.SetWorkingDirectoryCall
	21,  // 13: kernel.SyscallRequest.truncate_file:type_name -> kernel.TruncateFileCall
	22,  // 14: kernel.SyscallRequest.spawn_process:type_name -> kernel.SpawnProcessCall
	23,  // 15: kernel.SyscallRequest.kill_process:type_name -> kernel.KillProcessCall
	24,  // 16: kernel.SyscallRequest.get_process_info:type_name -> kernel.GetProcessInfoCall
	25,  // 17: kernel.SyscallRequest.get_process_list:type_name -> kernel.GetProcessListCall
	26,  // 18: kernel.SyscallRequest.set_process_priority:type_name -> kernel.SetProcessPriorityCall
	27,  // 19: kernel.SyscallRequest.get_process_state:type_name -> kernel.GetProcessStateCall
	28,  // 20: kernel.SyscallRequest.get_process_stats:type_name -> kernel.GetProcessStatsCall
	29,  // 21: kernel.SyscallRequest.wait_process:type_name -> kernel.WaitProcessCall
	30,  // 22: kernel.SyscallRequest.get_system_info:type_name -> kernel.GetSystemInfoCall
	31,  // 23: kernel.SyscallRequest.get_current_time:type_name -> kernel.GetCurrentTimeCall
	32,  // 24: kernel.SyscallRequest.get_env_var:type_name -> kernel.GetEnvVarCall
	33,  // 25: kernel.SyscallRequest.set_env_var:type_name -> kernel.SetEnvVarCall
	34,  // 26: kernel.SyscallRequest.sleep:type_name -> kernel.SleepCall
	35,  // 27: kernel.SyscallRequest.get_uptime:type_name -> kernel.GetUptimeCall
	36,  // 28: kernel.SyscallRequest.get_memory_stats:type_name -> kernel.GetMemoryStatsCall
	37,  // 29: kernel.SyscallRequest.get_process_memory_stats:type_name -> kernel.GetProcessMemoryStatsCall
	38,  // 30: kernel.SyscallRequest.trigger_gc:type_name -> kernel.TriggerGCCall
	39,  // 31: kernel.SyscallRequest.send_signal:type_name -> kernel.SendSignalCall
	47,  // 32: kernel.SyscallRequest.network_request:type_name -> kernel.NetworkRequestCall
	40,  // 33: kernel.SyscallRequest.register_signal_handler:type_name -> kernel.RegisterSignalHandlerCall
	41,  // 34: kernel.SyscallRequest.block_signal:type_name -> kernel.BlockSignalCall
	42,  // 35: kernel.SyscallRequest.unblock_signal:type_name -> kernel.UnblockSignalCall
	43,  // 36: kernel.SyscallRequest.get_pending_signals:type_name -> kernel.GetPendingSignalsCall
	44,  // 37: kernel.SyscallRequest.get_signal_stats:type_name -> kernel.GetSignalStatsCall
	45,  // 38: kernel.SyscallRequest.wait_for_signal:type_name -> kernel.WaitForSignalCall
	46,  // 39: kernel.SyscallRequest.get_signal_state:type_name -> kernel.GetSignalStateCall
	48,  // 40: kernel.SyscallRequest.socket:type_name -> kernel.SocketCall
	49,  // 41: kernel.SyscallRequest.bind:type_name -> kernel.BindCall
	50,  // 42: kernel.SyscallRequest.listen:type_name -> kernel.ListenCall
	51,  // 43: kernel.SyscallRequest.accept:type_name -> kernel.AcceptCall
	52,  // 44: kernel.SyscallRequest.connect:type_name -> kernel.ConnectCall
	53,  // 45: kernel.SyscallRequest.send:type_name -> kernel.SendCall
	54,  // 46: kernel.SyscallRequest.recv:type_name -> kernel.RecvCall
	55,  // 47: kernel.SyscallRequest.send_to:type_name -> kernel.SendToCall
	56,  // 48: kernel.SyscallRequest.recv_from:type_name -> kernel.RecvFromCall
	57,  // 49: kernel.SyscallRequest.close_socket:type_name -> kernel.CloseSocketCall
	58,  // 50: kernel.SyscallRequest.set_sock_opt:type_name -> kernel.SetSockOptCall
	59,  // 51: kernel.SyscallRequest.get_sock_opt:type_name -> kernel.GetSockOptCall
	60,  // 52: kernel.SyscallRequest.open:type_name -> kernel.OpenCall
	61,  // 53: kernel.SyscallRequest.close:type_name -> kernel.CloseCall
	62,  // 54: kernel.SyscallRequest.dup:type_name -> kernel.DupCall
	63,  // 55: kernel.SyscallRequest.dup2:type_name -> kernel.Dup2Call
	64,  // 56: kernel.SyscallRequest.lseek:type_name -> kernel.LseekCall
	65,  // 57: kernel.SyscallRequest.fcntl:type_name -> kernel.FcntlCall
	66,  // 58: kernel.SyscallRequest.create_pipe:type_name -> kernel.CreatePipeCall
	67,  // 59: kernel.SyscallRequest.write_pipe:type_name -> kernel.WritePipeCall
	68,  // 60: kernel.SyscallRequest.read_pipe:type_name -> kernel.ReadPipeCall
	69,  // 61: kernel.SyscallRequest.close_pipe:type_name -> kernel.ClosePipeCall
	70,  // 62: kernel.SyscallRequest.destroy_pipe:type_name -> kernel.DestroyPipeCall
	71,  // 63: kernel.SyscallRequest.pipe_stats:type_name -> kernel.PipeStatsCall
	72,  // 64: kernel.SyscallRequest.create_shm:type_name -> kernel.CreateShmCall
	73,  // 65: kernel.SyscallRequest.attach_shm:type_name -> kernel.AttachShmCall
	74,  // 66: kernel.SyscallRequest.detach_shm:type_name -> kernel.DetachShmCall
	75,  // 67: kernel.SyscallRequest.write_shm:type_name -> kernel.WriteShmCall
	76,  // 68: kernel.SyscallRequest.read_shm:type_name -> kernel.ReadShmCall
	77,  // 69: kernel.SyscallRequest.destroy_shm:type_name -> kernel.DestroyShmCall
	78,  // 70: kernel.SyscallRequest.shm_stats:type_name -> kernel.ShmStatsCall
	79,  // 71: kernel.SyscallRequest.mmap:type_name -> kernel.MmapCall
	80,  // 72: kernel.SyscallRequest.mmap_read:type_name -> kernel.MmapReadCall
	81,  // 73: kernel.SyscallRequest.mmap_write:type_name -> kernel.MmapWriteCall
	82,  // 74: kernel.SyscallRequest.msync:type_name -> kernel.MsyncCall
	83,  // 75: kernel.SyscallRequest.munmap:type_name -> kernel.MunmapCall
	84,  // 76: kernel.SyscallRequest.mmap_stats:type_name -> kernel.MmapStatsCall
	85,  // 77: kernel.SyscallRequest.create_queue:type_name -> kernel.CreateQueueCall
	86,  // 78: kernel.SyscallRequest.send_queue:type_name -> kernel.SendQueueCall
	87,  // 79: kernel.SyscallRequest.receive_queue:type_name -> kernel.ReceiveQueueCall
	88,  // 80: kernel.SyscallRequest.subscribe_queue:type_name -> kernel.SubscribeQueueCall
	89,  // 81: kernel.SyscallRequest.unsubscribe_queue:type_name -> kernel.UnsubscribeQueueCall
	90,  // 82: kernel.SyscallRequest.close_queue:type_name -> kernel.CloseQueueCall
	91,  // 83: kernel.SyscallRequest.destroy_queue:type_name -> kernel.DestroyQueueCall
	92,  // 84: kernel.SyscallRequest.queue_stats:type_name -> kernel.QueueStatsCall
	93,  // 85: kernel.SyscallRequest.schedule_next:type_name -> kernel.ScheduleNextCall
	94,  // 86: kernel.SyscallRequest.yield_process:type_name -> kernel.YieldProcessCall
	95,  // 87: kernel.SyscallRequest.get_current_scheduled:type_name -> kernel.GetCurrentScheduledCall
	96,  // 88: kernel.SyscallRequest.get_scheduler_stats:type_name -> kernel.GetSchedulerStatsCall
	97,  // 89: kernel.SyscallRequest.set_scheduling_policy:type_name -> kernel.SetSchedulingPolicyCall
	98,  // 90: kernel.SyscallRequest.get_scheduling_policy:type_name -> kernel.GetSchedulingPolicyCall
	99,  // 91: kernel.SyscallRequest.set_time_quantum:type_name -> kernel.SetTimeQuantumCall
	100, // 92: kernel.SyscallRequest.get_time_quantum:type_name -> kernel.GetTimeQuantumCall
	101, // 93: kernel.SyscallRequest.get_process_scheduler_stats:type_name -> kernel.GetProcessSchedulerStatsCall
	102, // 94: kernel.SyscallRequest.get_all_process_scheduler_stats:type_name -> kernel.GetAllProcessSchedulerStatsCall
	103, // 95: kernel.SyscallRequest.boost_priority:type_name -> kernel.BoostPriorityCall
	104, // 96: kernel.SyscallRequest.lower_priority:type_name -> kernel.LowerPriorityCall
	5,   // 97: kernel.SyscallResponse.success:type_name -> kernel.SuccessResult
	6,   // 98: kernel.SyscallResponse.error:type_name -> kernel.ErrorResult
	7,   // 99: kernel.SyscallResponse.permission_denied:type_name -> kernel.PermissionDeniedResult
	0,   // 100: kernel.CreateProcessRequest.sandbox_level:type_name -> kernel.SandboxLevel
	1,   // 101: kernel.UpdateSandboxRequest.capabilities:type_name -> kernel.Capability
	109, // 102: kernel.UpdateSandboxRequest.limits:type_name -> kernel.ResourceLimits
	112, // 103: kernel.KernelEvent.process_created:type_name -> kernel.ProcessCreatedEvent
	113, // 104: kernel.KernelEvent.process_terminated:type_name -> kernel.ProcessTerminatedEvent
	114, // 105: kernel.KernelEvent.syscall_executed:type_name -> kernel.SyscallExecutedEvent
	115, // 106: kernel.KernelEvent.permission_denied:type_name -> kernel.PermissionDeniedEvent
	116, // 107: kernel.KernelEvent.resource_cleanup:type_name -> kernel.ResourceCleanupEvent
	117, // 108: kernel.ResourceCleanupEvent.by_type:type_name -> kernel.ResourceTypeCleanup
	122, // 109: kernel.GetSchedulerStatsResponse.stats:type_name -> kernel.SchedulerStats
	126, // 110: kernel.StreamSyscallRequest.read:type_name -> kernel.StreamFileRead
	127, // 111: kernel.StreamSyscallRequest.write:type_name -> kernel.StreamFileWrite
	129, // 112: kernel.StreamSyscallChunk.complete:type_name -> kernel.StreamComplete
	2,   // 113: kernel.AsyncStatusResponse.status:type_name -> kernel.AsyncStatusResponse.Status
	4,   // 114: kernel.AsyncStatusResponse.result:type_name -> kernel.SyscallResponse
	3,   // 115: kernel.BatchSyscallRequest.requests:type_name -> kernel.SyscallRequest
	4,   // 116: kernel.BatchSyscallResponse.responses:type_name -> kernel.SyscallResponse
	139, // 117: kernel.ReapCompletionsResponse.completions:type_name -> kernel.IoUringCompletion
	4,   // 118: kernel.IoUringCompletion.result:type_name -> kernel.SyscallResponse
	3,   // 119: kernel.KernelService.ExecuteSyscall:input_type -> kernel.SyscallRequest
	125, // 120: kernel.KernelService.StreamSyscall:input_type -> kernel.StreamSyscallRequest
	3,   // 121: kernel.KernelService.ExecuteSyscallAsync:input_type -> kernel.SyscallRequest
	131, // 122: kernel.KernelService.GetAsyncStatus:input_type -> kernel.AsyncStatusRequest
	133, // 123: kernel.KernelService.CancelAsync:input_type -> kernel.AsyncCancelRequest
	135, // 124: kernel.KernelService.ExecuteSyscallBatch:input_type -> kernel.BatchSyscallRequest
	3,   // 125: kernel.KernelService.ExecuteSyscallIouring:input_type -> kernel.SyscallRequest
	137, // 126: kernel.KernelService.ReapCompletions:input_type -> kernel.ReapCompletionsRequest
	135, // 127: kernel.KernelService.SubmitIouringBatch:input_type -> kernel.BatchSyscallRequest
	105, // 128: kernel.KernelService.CreateProcess:input_type -> kernel.CreateProcessRequest
	107, // 129: kernel.KernelService.UpdateSandbox:input_type -> kernel.UpdateSandboxRequest
	118, // 130: kernel.KernelService.ScheduleNext:input_type -> kernel.ScheduleNextRequest
	120, // 131: kernel.KernelService.GetSchedulerStats:input_type -> kernel.GetSchedulerStatsRequest
	123, // 132: kernel.KernelService.SetSchedulingPolicy:input_type -> kernel.SetSchedulingPolicyRequest
	110, // 133: kernel.KernelService.StreamEvents:input_type -> kernel.EventStreamRequest
	4,   // 134: kernel.KernelService.ExecuteSyscall:output_type -> kernel.SyscallResponse
	128, // 135: kernel.KernelService.StreamSyscall:output_type -> kernel.StreamSyscallChunk
	130, // 136: kernel.KernelService.ExecuteSyscallAsync:output_type -> kernel.AsyncSyscallResponse
	132, // 137: kernel.KernelService.GetAsyncStatus:output_type -> kernel.AsyncStatusResponse
	134, // 138: kernel.KernelService.CancelAsync:output_type -> kernel.AsyncCancelResponse
	136, // 139: kernel.KernelService.ExecuteSyscallBatch:output_type -> kernel.BatchSyscallResponse
	130, // 140: kernel.KernelService.ExecuteSyscallIouring:output_type -> kernel.AsyncSyscallResponse
	138, // 141: kernel.KernelService.ReapCompletions:output_type -> kernel.ReapCompletionsResponse
	140, // 142: kernel.KernelService.SubmitIouringBatch:output_type -> kernel.IoUringBatchResponse
	106, // 143: kernel.KernelService.CreateProcess:output_type -> kernel.CreateProcessResponse
	108, // 144: kernel.KernelService.UpdateSandbox:output_type -> kernel.UpdateSandboxResponse
	119, // 145: kernel.KernelService.ScheduleNext:output_type -> kernel.ScheduleNextResponse
	121, // 146: kernel.KernelService.GetSchedulerStats:output_type -> kernel.GetSchedulerStatsResponse
	124, // 147: kernel.KernelService.SetSchedulingPolicy:output_type -> kernel.SetSchedulingPolicyResponse
	111, // 148: kernel.KernelService.StreamEvents:output_type -> kernel.KernelEvent
	134, // [134:149] is the sub-list for method output_type
	119, // [119:134] is the sub-list for method input_type
	119, // [119:119] is the sub-list for extension type_name
	119, // [119:119] is the sub-list for extension extendee
	0,   // [0:119] is the sub-list for field type_name
}

func init() { file_kernel_proto_init() }
func file_kernel_proto_init() {
	if File_kernel_proto != nil {
		return
	}
	file_kernel_proto_msgTypes[0].OneofWrappers = []any{
		(*SyscallRequest_ReadFile)(nil),
		(*SyscallRequest_WriteFile)(nil),
		(*SyscallRequest_CreateFile)(nil),
		(*SyscallRequest_DeleteFile)(nil),
		(*SyscallRequest_ListDirectory)(nil),
		(*SyscallRequest_FileExists)(nil),
		(*SyscallRequest_FileStat)(nil),
		(*SyscallRequest_MoveFile)(nil),
		(*SyscallRequest_CopyFile)(nil),
		(*SyscallRequest_CreateDirectory)(nil),
		(*SyscallRequest_RemoveDirectory)(nil),
		(*SyscallRequest_GetWorkingDirectory)(nil),
		(*SyscallRequest_SetWorkingDirectory)(nil),
		(*SyscallRequest_TruncateFile)(nil),
		(*SyscallRequest_SpawnProcess)(nil),
		(*SyscallRequest_KillProcess)(nil),
		(*SyscallRequest_GetProcessInfo)(nil),
		(*SyscallRequest_GetProcessList)(nil),
		(*SyscallRequest_SetProcessPriority)(nil),
		(*SyscallRequest_GetProcessState)(nil),
		(*SyscallRequest_GetProcessStats)(nil),
		(*SyscallRequest_WaitProcess)(nil),
		(*SyscallRequest_GetSystemInfo)(nil),
		(*SyscallRequest_GetCurrentTime)(nil),
		(*SyscallRequest_GetEnvVar)(nil),
		(*SyscallRequest_SetEnvVar)(nil),
		(*SyscallRequest_Sleep)(nil),
		(*SyscallRequest_GetUptime)(nil),
		(*SyscallRequest_GetMemoryStats)(nil),
		(*SyscallRequest_GetProcessMemoryStats)(nil),
		(*SyscallRequest_TriggerGc)(nil),
		(*SyscallRequest_SendSignal)(nil),
		(*SyscallRequest_NetworkRequest)(nil),
		(*SyscallRequest_RegisterSignalHandler)(nil),
		(*SyscallRequest_BlockSignal)(nil),
		(*SyscallRequest_UnblockSignal)(nil),
		(*SyscallRequest_GetPendingSignals)(nil),
		(*SyscallRequest_GetSignalStats)(nil),
		(*SyscallRequest_WaitForSignal)(nil),
		(*SyscallRequest_GetSignalState)(nil),
		(*SyscallRequest_Socket)(nil),
		(*SyscallRequest_Bind)(nil),
		(*SyscallRequest_Listen)(nil),
		(*SyscallRequest_Accept)(nil),
		(*SyscallRequest_Connect)(nil),
		(*SyscallRequest_Send)(nil),
		(*SyscallRequest_Recv)(nil),
		(*SyscallRequest_SendTo)(nil),
		(*SyscallRequest_RecvFrom)(nil),
		(*SyscallRequest_CloseSocket)(nil),
		(*SyscallRequest_SetSockOpt)(nil),
		(*SyscallRequest_GetSockOpt)(nil),
		(*SyscallRequest_Open)(nil),
		(*SyscallRequest_Close)(nil),
		(*SyscallRequest_Dup)(nil),
		(*SyscallRequest_Dup2)(nil),
		(*SyscallRequest_Lseek)(nil),
		(*SyscallRequest_Fcntl)(nil),
		(*SyscallRequest_CreatePipe)(nil),
		(*SyscallRequest_WritePipe)(nil),
		(*SyscallRequest_ReadPipe)(nil),
		(*SyscallRequest_ClosePipe)(nil),
		(*SyscallRequest_DestroyPipe)(nil),
		(*SyscallRequest_PipeStats)(nil),
		(*SyscallRequest_CreateShm)(nil),
		(*SyscallRequest_AttachShm)(nil),
		(*SyscallRequest_DetachShm)(nil),
		(*SyscallRequest_WriteShm)(nil),
		(*SyscallRequest_ReadShm)(nil),
		(*SyscallRequest_DestroyShm)(nil),
		(*SyscallRequest_ShmStats)(nil),
		(*SyscallRequest_Mmap)(nil),
		(*SyscallRequest_MmapRead)(nil),
		(*SyscallRequest_MmapWrite)(nil),
		(*SyscallRequest_Msync)(nil),
		(*SyscallRequest_Munmap)(nil),
		(*SyscallRequest_MmapStats)(nil),
		(*SyscallRequest_CreateQueue)(nil),
		(*SyscallRequest_SendQueue)(nil),
		(*SyscallRequest_ReceiveQueue)(nil),
		(*SyscallRequest_SubscribeQueue)(nil),
		(*SyscallRequest_UnsubscribeQueue)(nil),
		(*SyscallRequest_CloseQueue)(nil),
		(*SyscallRequest_DestroyQueue)(nil),
		(*SyscallRequest_QueueStats)(nil),
		(*SyscallRequest_ScheduleNext)(nil),
		(*SyscallRequest_YieldProcess)(nil),
		(*SyscallRequest_GetCurrentScheduled)(nil),
		(*SyscallRequest_GetSchedulerStats)(nil),
		(*SyscallRequest_SetSchedulingPolicy)(nil),
		(*SyscallRequest_GetSchedulingPolicy)(nil),
		(*SyscallRequest_SetTimeQuantum)(nil),
		(*SyscallRequest_GetTimeQuantum)(nil),
		(*SyscallRequest_GetProcessSchedulerStats)(nil),
		(*SyscallRequest_GetAllProcessSchedulerStats)(nil),
		(*SyscallRequest_BoostPriority)(nil),
		(*SyscallRequest_LowerPriority)(nil),
	}
	file_kernel_proto_msgTypes[1].OneofWrappers = []any{
		(*SyscallResponse_Success)(nil),
		(*SyscallResponse_Error)(nil),
		(*SyscallResponse_PermissionDenied)(nil),
	}
	file_kernel_proto_msgTypes[26].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[35].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[42].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[43].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[63].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[82].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[83].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[102].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[103].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[108].OneofWrappers = []any{
		(*KernelEvent_ProcessCreated)(nil),
		(*KernelEvent_ProcessTerminated)(nil),
		(*KernelEvent_SyscallExecuted)(nil),
		(*KernelEvent_PermissionDenied)(nil),
		(*KernelEvent_ResourceCleanup)(nil),
	}
	file_kernel_proto_msgTypes[116].OneofWrappers = []any{}
	file_kernel_proto_msgTypes[122].OneofWrappers = []any{
		(*StreamSyscallRequest_Read)(nil),
		(*StreamSyscallRequest_Write)(nil),
	}
	file_kernel_proto_msgTypes[125].OneofWrappers = []any{
		(*StreamSyscallChunk_Data)(nil),
		(*StreamSyscallChunk_Error)(nil),
		(*StreamSyscallChunk_Complete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kernel_proto_rawDesc), len(file_kernel_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kernel_proto_goTypes,
		DependencyIndexes: file_kernel_proto_depIdxs,
		EnumInfos:         file_kernel_proto_enumTypes,
		MessageInfos:      file_kernel_proto_msgTypes,
	}.Build()
	File_kernel_proto = out.File
	file_kernel_proto_goTypes = nil
	file_kernel_proto_depIdxs = nil
}
