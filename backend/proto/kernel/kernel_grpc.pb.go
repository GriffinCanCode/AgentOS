// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: kernel.proto

package kernel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KernelService_ExecuteSyscall_FullMethodName        = "/kernel.KernelService/ExecuteSyscall"
	KernelService_StreamSyscall_FullMethodName         = "/kernel.KernelService/StreamSyscall"
	KernelService_ExecuteSyscallAsync_FullMethodName   = "/kernel.KernelService/ExecuteSyscallAsync"
	KernelService_GetAsyncStatus_FullMethodName        = "/kernel.KernelService/GetAsyncStatus"
	KernelService_CancelAsync_FullMethodName           = "/kernel.KernelService/CancelAsync"
	KernelService_ExecuteSyscallBatch_FullMethodName   = "/kernel.KernelService/ExecuteSyscallBatch"
	KernelService_ExecuteSyscallIouring_FullMethodName = "/kernel.KernelService/ExecuteSyscallIouring"
	KernelService_ReapCompletions_FullMethodName       = "/kernel.KernelService/ReapCompletions"
	KernelService_SubmitIouringBatch_FullMethodName    = "/kernel.KernelService/SubmitIouringBatch"
	KernelService_CreateProcess_FullMethodName         = "/kernel.KernelService/CreateProcess"
	KernelService_UpdateSandbox_FullMethodName         = "/kernel.KernelService/UpdateSandbox"
	KernelService_ScheduleNext_FullMethodName          = "/kernel.KernelService/ScheduleNext"
	KernelService_GetSchedulerStats_FullMethodName     = "/kernel.KernelService/GetSchedulerStats"
	KernelService_SetSchedulingPolicy_FullMethodName   = "/kernel.KernelService/SetSchedulingPolicy"
	KernelService_StreamEvents_FullMethodName          = "/kernel.KernelService/StreamEvents"
)

// KernelServiceClient is the client API for KernelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Kernel service for executing syscalls
type KernelServiceClient interface {
	// Execute a system call
	ExecuteSyscall(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*SyscallResponse, error)
	// Streaming syscall for large data transfers
	StreamSyscall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamSyscallRequest, StreamSyscallChunk], error)
	// Async syscall execution
	ExecuteSyscallAsync(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*AsyncSyscallResponse, error)
	GetAsyncStatus(ctx context.Context, in *AsyncStatusRequest, opts ...grpc.CallOption) (*AsyncStatusResponse, error)
	CancelAsync(ctx context.Context, in *AsyncCancelRequest, opts ...grpc.CallOption) (*AsyncCancelResponse, error)
	// Batch syscall execution
	ExecuteSyscallBatch(ctx context.Context, in *BatchSyscallRequest, opts ...grpc.CallOption) (*BatchSyscallResponse, error)
	// io_uring-style async syscall completion
	ExecuteSyscallIouring(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*AsyncSyscallResponse, error)
	ReapCompletions(ctx context.Context, in *ReapCompletionsRequest, opts ...grpc.CallOption) (*ReapCompletionsResponse, error)
	SubmitIouringBatch(ctx context.Context, in *BatchSyscallRequest, opts ...grpc.CallOption) (*IoUringBatchResponse, error)
	// Create a sandboxed process
	CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error)
	// Manage sandbox permissions
	UpdateSandbox(ctx context.Context, in *UpdateSandboxRequest, opts ...grpc.CallOption) (*UpdateSandboxResponse, error)
	// Scheduler operations
	ScheduleNext(ctx context.Context, in *ScheduleNextRequest, opts ...grpc.CallOption) (*ScheduleNextResponse, error)
	GetSchedulerStats(ctx context.Context, in *GetSchedulerStatsRequest, opts ...grpc.CallOption) (*GetSchedulerStatsResponse, error)
	SetSchedulingPolicy(ctx context.Context, in *SetSchedulingPolicyRequest, opts ...grpc.CallOption) (*SetSchedulingPolicyResponse, error)
	// Stream kernel events (optional, for future)
	StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KernelEvent], error)
}

type kernelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelServiceClient(cc grpc.ClientConnInterface) KernelServiceClient {
	return &kernelServiceClient{cc}
}

func (c *kernelServiceClient) ExecuteSyscall(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*SyscallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyscallResponse)
	err := c.cc.Invoke(ctx, KernelService_ExecuteSyscall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) StreamSyscall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamSyscallRequest, StreamSyscallChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KernelService_ServiceDesc.Streams[0], KernelService_StreamSyscall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSyscallRequest, StreamSyscallChunk]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamSyscallClient = grpc.BidiStreamingClient[StreamSyscallRequest, StreamSyscallChunk]

func (c *kernelServiceClient) ExecuteSyscallAsync(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*AsyncSyscallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncSyscallResponse)
	err := c.cc.Invoke(ctx, KernelService_ExecuteSyscallAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) GetAsyncStatus(ctx context.Context, in *AsyncStatusRequest, opts ...grpc.CallOption) (*AsyncStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncStatusResponse)
	err := c.cc.Invoke(ctx, KernelService_GetAsyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) CancelAsync(ctx context.Context, in *AsyncCancelRequest, opts ...grpc.CallOption) (*AsyncCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncCancelResponse)
	err := c.cc.Invoke(ctx, KernelService_CancelAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) ExecuteSyscallBatch(ctx context.Context, in *BatchSyscallRequest, opts ...grpc.CallOption) (*BatchSyscallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSyscallResponse)
	err := c.cc.Invoke(ctx, KernelService_ExecuteSyscallBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) ExecuteSyscallIouring(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*AsyncSyscallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncSyscallResponse)
	err := c.cc.Invoke(ctx, KernelService_ExecuteSyscallIouring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) ReapCompletions(ctx context.Context, in *ReapCompletionsRequest, opts ...grpc.CallOption) (*ReapCompletionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReapCompletionsResponse)
	err := c.cc.Invoke(ctx, KernelService_ReapCompletions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) SubmitIouringBatch(ctx context.Context, in *BatchSyscallRequest, opts ...grpc.CallOption) (*IoUringBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IoUringBatchResponse)
	err := c.cc.Invoke(ctx, KernelService_SubmitIouringBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProcessResponse)
	err := c.cc.Invoke(ctx, KernelService_CreateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) UpdateSandbox(ctx context.Context, in *UpdateSandboxRequest, opts ...grpc.CallOption) (*UpdateSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSandboxResponse)
	err := c.cc.Invoke(ctx, KernelService_UpdateSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) ScheduleNext(ctx context.Context, in *ScheduleNextRequest, opts ...grpc.CallOption) (*ScheduleNextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleNextResponse)
	err := c.cc.Invoke(ctx, KernelService_ScheduleNext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) GetSchedulerStats(ctx context.Context, in *GetSchedulerStatsRequest, opts ...grpc.CallOption) (*GetSchedulerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulerStatsResponse)
	err := c.cc.Invoke(ctx, KernelService_GetSchedulerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) SetSchedulingPolicy(ctx context.Context, in *SetSchedulingPolicyRequest, opts ...grpc.CallOption) (*SetSchedulingPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSchedulingPolicyResponse)
	err := c.cc.Invoke(ctx, KernelService_SetSchedulingPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KernelEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KernelService_ServiceDesc.Streams[1], KernelService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, KernelEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamEventsClient = grpc.ServerStreamingClient[KernelEvent]

// KernelServiceServer is the server API for KernelService service.
// All implementations must embed UnimplementedKernelServiceServer
// for forward compatibility.
//
// Kernel service for executing syscalls
type KernelServiceServer interface {
	// Execute a system call
	ExecuteSyscall(context.Context, *SyscallRequest) (*SyscallResponse, error)
	// Streaming syscall for large data transfers
	StreamSyscall(grpc.BidiStreamingServer[StreamSyscallRequest, StreamSyscallChunk]) error
	// Async syscall execution
	ExecuteSyscallAsync(context.Context, *SyscallRequest) (*AsyncSyscallResponse, error)
	GetAsyncStatus(context.Context, *AsyncStatusRequest) (*AsyncStatusResponse, error)
	CancelAsync(context.Context, *AsyncCancelRequest) (*AsyncCancelResponse, error)
	// Batch syscall execution
	ExecuteSyscallBatch(context.Context, *BatchSyscallRequest) (*BatchSyscallResponse, error)
	// io_uring-style async syscall completion
	ExecuteSyscallIouring(context.Context, *SyscallRequest) (*AsyncSyscallResponse, error)
	ReapCompletions(context.Context, *ReapCompletionsRequest) (*ReapCompletionsResponse, error)
	SubmitIouringBatch(context.Context, *BatchSyscallRequest) (*IoUringBatchResponse, error)
	// Create a sandboxed process
	CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error)
	// Manage sandbox permissions
	UpdateSandbox(context.Context, *UpdateSandboxRequest) (*UpdateSandboxResponse, error)
	// Scheduler operations
	ScheduleNext(context.Context, *ScheduleNextRequest) (*ScheduleNextResponse, error)
	GetSchedulerStats(context.Context, *GetSchedulerStatsRequest) (*GetSchedulerStatsResponse, error)
	SetSchedulingPolicy(context.Context, *SetSchedulingPolicyRequest) (*SetSchedulingPolicyResponse, error)
	// Stream kernel events (optional, for future)
	StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[KernelEvent]) error
	mustEmbedUnimplementedKernelServiceServer()
}

// UnimplementedKernelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKernelServiceServer struct{}

func (UnimplementedKernelServiceServer) ExecuteSyscall(context.Context, *SyscallRequest) (*SyscallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSyscall not implemented")
}
func (UnimplementedKernelServiceServer) StreamSyscall(grpc.BidiStreamingServer[StreamSyscallRequest, StreamSyscallChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSyscall not implemented")
}
func (UnimplementedKernelServiceServer) ExecuteSyscallAsync(context.Context, *SyscallRequest) (*AsyncSyscallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSyscallAsync not implemented")
}
func (UnimplementedKernelServiceServer) GetAsyncStatus(context.Context, *AsyncStatusRequest) (*AsyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsyncStatus not implemented")
}
func (UnimplementedKernelServiceServer) CancelAsync(context.Context, *AsyncCancelRequest) (*AsyncCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAsync not implemented")
}
func (UnimplementedKernelServiceServer) ExecuteSyscallBatch(context.Context, *BatchSyscallRequest) (*BatchSyscallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSyscallBatch not implemented")
}
func (UnimplementedKernelServiceServer) ExecuteSyscallIouring(context.Context, *SyscallRequest) (*AsyncSyscallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSyscallIouring not implemented")
}
func (UnimplementedKernelServiceServer) ReapCompletions(context.Context, *ReapCompletionsRequest) (*ReapCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReapCompletions not implemented")
}
func (UnimplementedKernelServiceServer) SubmitIouringBatch(context.Context, *BatchSyscallRequest) (*IoUringBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIouringBatch not implemented")
}
func (UnimplementedKernelServiceServer) CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (UnimplementedKernelServiceServer) UpdateSandbox(context.Context, *UpdateSandboxRequest) (*UpdateSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSandbox not implemented")
}
func (UnimplementedKernelServiceServer) ScheduleNext(context.Context, *ScheduleNextRequest) (*ScheduleNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleNext not implemented")
}
func (UnimplementedKernelServiceServer) GetSchedulerStats(context.Context, *GetSchedulerStatsRequest) (*GetSchedulerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerStats not implemented")
}
func (UnimplementedKernelServiceServer) SetSchedulingPolicy(context.Context, *SetSchedulingPolicyRequest) (*SetSchedulingPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulingPolicy not implemented")
}
func (UnimplementedKernelServiceServer) StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[KernelEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedKernelServiceServer) mustEmbedUnimplementedKernelServiceServer() {}
func (UnimplementedKernelServiceServer) testEmbeddedByValue()                       {}

// UnsafeKernelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelServiceServer will
// result in compilation errors.
type UnsafeKernelServiceServer interface {
	mustEmbedUnimplementedKernelServiceServer()
}

func RegisterKernelServiceServer(s grpc.ServiceRegistrar, srv KernelServiceServer) {
	// If the following call pancis, it indicates UnimplementedKernelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KernelService_ServiceDesc, srv)
}

func _KernelService_ExecuteSyscall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ExecuteSyscall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ExecuteSyscall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ExecuteSyscall(ctx, req.(*SyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_StreamSyscall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KernelServiceServer).StreamSyscall(&grpc.GenericServerStream[StreamSyscallRequest, StreamSyscallChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamSyscallServer = grpc.BidiStreamingServer[StreamSyscallRequest, StreamSyscallChunk]

func _KernelService_ExecuteSyscallAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ExecuteSyscallAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ExecuteSyscallAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ExecuteSyscallAsync(ctx, req.(*SyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_GetAsyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).GetAsyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_GetAsyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).GetAsyncStatus(ctx, req.(*AsyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_CancelAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).CancelAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_CancelAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).CancelAsync(ctx, req.(*AsyncCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_ExecuteSyscallBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ExecuteSyscallBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ExecuteSyscallBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ExecuteSyscallBatch(ctx, req.(*BatchSyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_ExecuteSyscallIouring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ExecuteSyscallIouring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ExecuteSyscallIouring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ExecuteSyscallIouring(ctx, req.(*SyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_ReapCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReapCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ReapCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ReapCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ReapCompletions(ctx, req.(*ReapCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_SubmitIouringBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).SubmitIouringBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_SubmitIouringBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).SubmitIouringBatch(ctx, req.(*BatchSyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_CreateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).CreateProcess(ctx, req.(*CreateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_UpdateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).UpdateSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_UpdateSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).UpdateSandbox(ctx, req.(*UpdateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_ScheduleNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ScheduleNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ScheduleNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ScheduleNext(ctx, req.(*ScheduleNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_GetSchedulerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).GetSchedulerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_GetSchedulerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).GetSchedulerStats(ctx, req.(*GetSchedulerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_SetSchedulingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).SetSchedulingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_SetSchedulingPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).SetSchedulingPolicy(ctx, req.(*SetSchedulingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventStreamRequest, KernelEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamEventsServer = grpc.ServerStreamingServer[KernelEvent]

// KernelService_ServiceDesc is the grpc.ServiceDesc for KernelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KernelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kernel.KernelService",
	HandlerType: (*KernelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteSyscall",
			Handler:    _KernelService_ExecuteSyscall_Handler,
		},
		{
			MethodName: "ExecuteSyscallAsync",
			Handler:    _KernelService_ExecuteSyscallAsync_Handler,
		},
		{
			MethodName: "GetAsyncStatus",
			Handler:    _KernelService_GetAsyncStatus_Handler,
		},
		{
			MethodName: "CancelAsync",
			Handler:    _KernelService_CancelAsync_Handler,
		},
		{
			MethodName: "ExecuteSyscallBatch",
			Handler:    _KernelService_ExecuteSyscallBatch_Handler,
		},
		{
			MethodName: "ExecuteSyscallIouring",
			Handler:    _KernelService_ExecuteSyscallIouring_Handler,
		},
		{
			MethodName: "ReapCompletions",
			Handler:    _KernelService_ReapCompletions_Handler,
		},
		{
			MethodName: "SubmitIouringBatch",
			Handler:    _KernelService_SubmitIouringBatch_Handler,
		},
		{
			MethodName: "CreateProcess",
			Handler:    _KernelService_CreateProcess_Handler,
		},
		{
			MethodName: "UpdateSandbox",
			Handler:    _KernelService_UpdateSandbox_Handler,
		},
		{
			MethodName: "ScheduleNext",
			Handler:    _KernelService_ScheduleNext_Handler,
		},
		{
			MethodName: "GetSchedulerStats",
			Handler:    _KernelService_GetSchedulerStats_Handler,
		},
		{
			MethodName: "SetSchedulingPolicy",
			Handler:    _KernelService_SetSchedulingPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSyscall",
			Handler:       _KernelService_StreamSyscall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _KernelService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kernel.proto",
}
