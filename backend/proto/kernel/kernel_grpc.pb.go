// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: kernel.proto

package kernel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KernelService_ExecuteSyscall_FullMethodName = "/kernel.KernelService/ExecuteSyscall"
	KernelService_CreateProcess_FullMethodName  = "/kernel.KernelService/CreateProcess"
	KernelService_UpdateSandbox_FullMethodName  = "/kernel.KernelService/UpdateSandbox"
	KernelService_StreamEvents_FullMethodName   = "/kernel.KernelService/StreamEvents"
)

// KernelServiceClient is the client API for KernelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Kernel service for executing syscalls
type KernelServiceClient interface {
	// Execute a system call
	ExecuteSyscall(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*SyscallResponse, error)
	// Create a sandboxed process
	CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error)
	// Manage sandbox permissions
	UpdateSandbox(ctx context.Context, in *UpdateSandboxRequest, opts ...grpc.CallOption) (*UpdateSandboxResponse, error)
	// Stream kernel events (optional, for future)
	StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KernelEvent], error)
}

type kernelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelServiceClient(cc grpc.ClientConnInterface) KernelServiceClient {
	return &kernelServiceClient{cc}
}

func (c *kernelServiceClient) ExecuteSyscall(ctx context.Context, in *SyscallRequest, opts ...grpc.CallOption) (*SyscallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyscallResponse)
	err := c.cc.Invoke(ctx, KernelService_ExecuteSyscall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProcessResponse)
	err := c.cc.Invoke(ctx, KernelService_CreateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) UpdateSandbox(ctx context.Context, in *UpdateSandboxRequest, opts ...grpc.CallOption) (*UpdateSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSandboxResponse)
	err := c.cc.Invoke(ctx, KernelService_UpdateSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelServiceClient) StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KernelEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KernelService_ServiceDesc.Streams[0], KernelService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, KernelEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamEventsClient = grpc.ServerStreamingClient[KernelEvent]

// KernelServiceServer is the server API for KernelService service.
// All implementations must embed UnimplementedKernelServiceServer
// for forward compatibility.
//
// Kernel service for executing syscalls
type KernelServiceServer interface {
	// Execute a system call
	ExecuteSyscall(context.Context, *SyscallRequest) (*SyscallResponse, error)
	// Create a sandboxed process
	CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error)
	// Manage sandbox permissions
	UpdateSandbox(context.Context, *UpdateSandboxRequest) (*UpdateSandboxResponse, error)
	// Stream kernel events (optional, for future)
	StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[KernelEvent]) error
	mustEmbedUnimplementedKernelServiceServer()
}

// UnimplementedKernelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKernelServiceServer struct{}

func (UnimplementedKernelServiceServer) ExecuteSyscall(context.Context, *SyscallRequest) (*SyscallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSyscall not implemented")
}
func (UnimplementedKernelServiceServer) CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (UnimplementedKernelServiceServer) UpdateSandbox(context.Context, *UpdateSandboxRequest) (*UpdateSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSandbox not implemented")
}
func (UnimplementedKernelServiceServer) StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[KernelEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedKernelServiceServer) mustEmbedUnimplementedKernelServiceServer() {}
func (UnimplementedKernelServiceServer) testEmbeddedByValue()                       {}

// UnsafeKernelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelServiceServer will
// result in compilation errors.
type UnsafeKernelServiceServer interface {
	mustEmbedUnimplementedKernelServiceServer()
}

func RegisterKernelServiceServer(s grpc.ServiceRegistrar, srv KernelServiceServer) {
	// If the following call pancis, it indicates UnimplementedKernelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KernelService_ServiceDesc, srv)
}

func _KernelService_ExecuteSyscall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyscallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).ExecuteSyscall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_ExecuteSyscall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).ExecuteSyscall(ctx, req.(*SyscallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_CreateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).CreateProcess(ctx, req.(*CreateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_UpdateSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServiceServer).UpdateSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KernelService_UpdateSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServiceServer).UpdateSandbox(ctx, req.(*UpdateSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventStreamRequest, KernelEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KernelService_StreamEventsServer = grpc.ServerStreamingServer[KernelEvent]

// KernelService_ServiceDesc is the grpc.ServiceDesc for KernelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KernelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kernel.KernelService",
	HandlerType: (*KernelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteSyscall",
			Handler:    _KernelService_ExecuteSyscall_Handler,
		},
		{
			MethodName: "CreateProcess",
			Handler:    _KernelService_CreateProcess_Handler,
		},
		{
			MethodName: "UpdateSandbox",
			Handler:    _KernelService_UpdateSandbox_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _KernelService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kernel.proto",
}
