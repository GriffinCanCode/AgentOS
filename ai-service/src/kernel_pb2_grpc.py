# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import kernel_pb2 as kernel__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kernel_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KernelServiceStub(object):
    """Kernel service for executing syscalls
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteSyscall = channel.unary_unary(
                '/kernel.KernelService/ExecuteSyscall',
                request_serializer=kernel__pb2.SyscallRequest.SerializeToString,
                response_deserializer=kernel__pb2.SyscallResponse.FromString,
                _registered_method=True)
        self.CreateProcess = channel.unary_unary(
                '/kernel.KernelService/CreateProcess',
                request_serializer=kernel__pb2.CreateProcessRequest.SerializeToString,
                response_deserializer=kernel__pb2.CreateProcessResponse.FromString,
                _registered_method=True)
        self.UpdateSandbox = channel.unary_unary(
                '/kernel.KernelService/UpdateSandbox',
                request_serializer=kernel__pb2.UpdateSandboxRequest.SerializeToString,
                response_deserializer=kernel__pb2.UpdateSandboxResponse.FromString,
                _registered_method=True)
        self.StreamEvents = channel.unary_stream(
                '/kernel.KernelService/StreamEvents',
                request_serializer=kernel__pb2.EventStreamRequest.SerializeToString,
                response_deserializer=kernel__pb2.KernelEvent.FromString,
                _registered_method=True)


class KernelServiceServicer(object):
    """Kernel service for executing syscalls
    """

    def ExecuteSyscall(self, request, context):
        """Execute a system call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProcess(self, request, context):
        """Create a sandboxed process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSandbox(self, request, context):
        """Manage sandbox permissions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamEvents(self, request, context):
        """Stream kernel events (optional, for future)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KernelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteSyscall': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSyscall,
                    request_deserializer=kernel__pb2.SyscallRequest.FromString,
                    response_serializer=kernel__pb2.SyscallResponse.SerializeToString,
            ),
            'CreateProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProcess,
                    request_deserializer=kernel__pb2.CreateProcessRequest.FromString,
                    response_serializer=kernel__pb2.CreateProcessResponse.SerializeToString,
            ),
            'UpdateSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSandbox,
                    request_deserializer=kernel__pb2.UpdateSandboxRequest.FromString,
                    response_serializer=kernel__pb2.UpdateSandboxResponse.SerializeToString,
            ),
            'StreamEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEvents,
                    request_deserializer=kernel__pb2.EventStreamRequest.FromString,
                    response_serializer=kernel__pb2.KernelEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kernel.KernelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kernel.KernelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KernelService(object):
    """Kernel service for executing syscalls
    """

    @staticmethod
    def ExecuteSyscall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kernel.KernelService/ExecuteSyscall',
            kernel__pb2.SyscallRequest.SerializeToString,
            kernel__pb2.SyscallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kernel.KernelService/CreateProcess',
            kernel__pb2.CreateProcessRequest.SerializeToString,
            kernel__pb2.CreateProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kernel.KernelService/UpdateSandbox',
            kernel__pb2.UpdateSandboxRequest.SerializeToString,
            kernel__pb2.UpdateSandboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kernel.KernelService/StreamEvents',
            kernel__pb2.EventStreamRequest.SerializeToString,
            kernel__pb2.KernelEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
