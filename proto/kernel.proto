syntax = "proto3";

package kernel;

option go_package = "github.com/GriffinCanCode/AgentOS/backend/proto/kernel";

// Kernel service for executing syscalls
service KernelService {
  // Execute a system call
  rpc ExecuteSyscall(SyscallRequest) returns (SyscallResponse);

  // Streaming syscall for large data transfers
  rpc StreamSyscall(stream StreamSyscallRequest) returns (stream StreamSyscallChunk);

  // Async syscall execution
  rpc ExecuteSyscallAsync(SyscallRequest) returns (AsyncSyscallResponse);
  rpc GetAsyncStatus(AsyncStatusRequest) returns (AsyncStatusResponse);
  rpc CancelAsync(AsyncCancelRequest) returns (AsyncCancelResponse);

  // Batch syscall execution
  rpc ExecuteSyscallBatch(BatchSyscallRequest) returns (BatchSyscallResponse);

  // Create a sandboxed process
  rpc CreateProcess(CreateProcessRequest) returns (CreateProcessResponse);

  // Manage sandbox permissions
  rpc UpdateSandbox(UpdateSandboxRequest) returns (UpdateSandboxResponse);

  // Scheduler operations
  rpc ScheduleNext(ScheduleNextRequest) returns (ScheduleNextResponse);
  rpc GetSchedulerStats(GetSchedulerStatsRequest) returns (GetSchedulerStatsResponse);
  rpc SetSchedulingPolicy(SetSchedulingPolicyRequest) returns (SetSchedulingPolicyResponse);

  // Stream kernel events (optional, for future)
  rpc StreamEvents(EventStreamRequest) returns (stream KernelEvent);
}

// ============================================================================
// Syscall Types
// ============================================================================

message SyscallRequest {
  uint32 pid = 1;
  oneof syscall {
    ReadFileCall read_file = 10;
    WriteFileCall write_file = 11;
    CreateFileCall create_file = 12;
    DeleteFileCall delete_file = 13;
    ListDirectoryCall list_directory = 14;
    FileExistsCall file_exists = 15;
    FileStatCall file_stat = 16;
    MoveFileCall move_file = 17;
    CopyFileCall copy_file = 18;
    CreateDirectoryCall create_directory = 19;
    RemoveDirectoryCall remove_directory = 22;
    GetWorkingDirectoryCall get_working_directory = 23;
    SetWorkingDirectoryCall set_working_directory = 24;
    TruncateFileCall truncate_file = 25;
    SpawnProcessCall spawn_process = 20;
    KillProcessCall kill_process = 21;
    GetProcessInfoCall get_process_info = 26;
    GetProcessListCall get_process_list = 27;
    SetProcessPriorityCall set_process_priority = 28;
    GetProcessStateCall get_process_state = 29;
    GetProcessStatsCall get_process_stats = 33;
    WaitProcessCall wait_process = 34;
    GetSystemInfoCall get_system_info = 30;
    GetCurrentTimeCall get_current_time = 31;
    GetEnvVarCall get_env_var = 32;
    SetEnvVarCall set_env_var = 35;
    SleepCall sleep = 36;
    GetUptimeCall get_uptime = 37;
    GetMemoryStatsCall get_memory_stats = 38;
    GetProcessMemoryStatsCall get_process_memory_stats = 39;
    TriggerGCCall trigger_gc = 41;
    SendSignalCall send_signal = 42;
    NetworkRequestCall network_request = 40;
    // Network - Sockets
    SocketCall socket = 120;
    BindCall bind = 121;
    ListenCall listen = 122;
    AcceptCall accept = 123;
    ConnectCall connect = 124;
    SendCall send = 125;
    RecvCall recv = 126;
    SendToCall send_to = 127;
    RecvFromCall recv_from = 128;
    CloseSocketCall close_socket = 129;
    SetSockOptCall set_sock_opt = 130;
    GetSockOptCall get_sock_opt = 131;
    // File Descriptors
    OpenCall open = 100;
    CloseCall close = 101;
    DupCall dup = 102;
    Dup2Call dup2 = 103;
    LseekCall lseek = 104;
    FcntlCall fcntl = 105;
    // IPC - Pipes
    CreatePipeCall create_pipe = 50;
    WritePipeCall write_pipe = 51;
    ReadPipeCall read_pipe = 52;
    ClosePipeCall close_pipe = 53;
    DestroyPipeCall destroy_pipe = 54;
    PipeStatsCall pipe_stats = 55;
    // IPC - Shared Memory
    CreateShmCall create_shm = 60;
    AttachShmCall attach_shm = 61;
    DetachShmCall detach_shm = 62;
    WriteShmCall write_shm = 63;
    ReadShmCall read_shm = 64;
    DestroyShmCall destroy_shm = 65;
    ShmStatsCall shm_stats = 66;
    // IPC - Memory-Mapped Files
    MmapCall mmap = 67;
    MmapReadCall mmap_read = 68;
    MmapWriteCall mmap_write = 69;
    MsyncCall msync = 140;
    MunmapCall munmap = 141;
    MmapStatsCall mmap_stats = 142;
    // IPC - Async Queues
    CreateQueueCall create_queue = 110;
    SendQueueCall send_queue = 111;
    ReceiveQueueCall receive_queue = 112;
    SubscribeQueueCall subscribe_queue = 113;
    UnsubscribeQueueCall unsubscribe_queue = 114;
    CloseQueueCall close_queue = 115;
    DestroyQueueCall destroy_queue = 116;
    QueueStatsCall queue_stats = 117;
    // Scheduler
    ScheduleNextCall schedule_next = 70;
    YieldProcessCall yield_process = 71;
    GetCurrentScheduledCall get_current_scheduled = 72;
    GetSchedulerStatsCall get_scheduler_stats = 73;
    SetSchedulingPolicyCall set_scheduling_policy = 74;
    GetSchedulingPolicyCall get_scheduling_policy = 75;
    SetTimeQuantumCall set_time_quantum = 76;
    GetTimeQuantumCall get_time_quantum = 77;
    GetProcessSchedulerStatsCall get_process_scheduler_stats = 78;
    GetAllProcessSchedulerStatsCall get_all_process_scheduler_stats = 79;
    BoostPriorityCall boost_priority = 81;
    LowerPriorityCall lower_priority = 82;
  }
}

message SyscallResponse {
  oneof result {
    SuccessResult success = 1;
    ErrorResult error = 2;
    PermissionDeniedResult permission_denied = 3;
  }
}

message SuccessResult {
  bytes data = 1;
}

message ErrorResult {
  string message = 1;
}

message PermissionDeniedResult {
  string reason = 1;
}

// ============================================================================
// File System Calls
// ============================================================================

message ReadFileCall {
  string path = 1;
}

message WriteFileCall {
  string path = 1;
  bytes data = 2;
}

message CreateFileCall {
  string path = 1;
}

message DeleteFileCall {
  string path = 1;
}

message ListDirectoryCall {
  string path = 1;
}

message FileExistsCall {
  string path = 1;
}

message FileStatCall {
  string path = 1;
}

message MoveFileCall {
  string source = 1;
  string destination = 2;
}

message CopyFileCall {
  string source = 1;
  string destination = 2;
}

message CreateDirectoryCall {
  string path = 1;
}

message RemoveDirectoryCall {
  string path = 1;
}

message GetWorkingDirectoryCall {}

message SetWorkingDirectoryCall {
  string path = 1;
}

message TruncateFileCall {
  string path = 1;
  uint64 size = 2;
}

// ============================================================================
// Process Calls
// ============================================================================

message SpawnProcessCall {
  string command = 1;
  repeated string args = 2;
}

message KillProcessCall {
  uint32 target_pid = 1;
}

message GetProcessInfoCall {
  uint32 target_pid = 1;
}

message GetProcessListCall {}

message SetProcessPriorityCall {
  uint32 target_pid = 1;
  uint32 priority = 2;
}

message GetProcessStateCall {
  uint32 target_pid = 1;
}

message GetProcessStatsCall {
  uint32 target_pid = 1;
}

message WaitProcessCall {
  uint32 target_pid = 1;
  optional uint64 timeout_ms = 2;
}

// ============================================================================
// System Info Calls
// ============================================================================

message GetSystemInfoCall {}

message GetCurrentTimeCall {}

message GetEnvVarCall {
  string key = 1;
}

message SetEnvVarCall {
  string key = 1;
  string value = 2;
}

// ============================================================================
// Time Calls
// ============================================================================

message SleepCall {
  uint64 duration_ms = 1;
}

message GetUptimeCall {}

// ============================================================================
// Memory Calls
// ============================================================================

message GetMemoryStatsCall {}

message GetProcessMemoryStatsCall {
  uint32 target_pid = 1;
}

message TriggerGCCall {
  optional uint32 target_pid = 1;
}

// ============================================================================
// Signal Calls
// ============================================================================

message SendSignalCall {
  uint32 target_pid = 1;
  uint32 signal = 2;
}

// ============================================================================
// Network Calls
// ============================================================================

message NetworkRequestCall {
  string url = 1;
}

// ============================================================================
// Network Calls - Sockets
// ============================================================================

message SocketCall {
  uint32 domain = 1;
  uint32 socket_type = 2;
  uint32 protocol = 3;
}

message BindCall {
  uint32 sockfd = 1;
  string address = 2;
}

message ListenCall {
  uint32 sockfd = 1;
  uint32 backlog = 2;
}

message AcceptCall {
  uint32 sockfd = 1;
}

message ConnectCall {
  uint32 sockfd = 1;
  string address = 2;
}

message SendCall {
  uint32 sockfd = 1;
  bytes data = 2;
  uint32 flags = 3;
}

message RecvCall {
  uint32 sockfd = 1;
  uint32 size = 2;
  uint32 flags = 3;
}

message SendToCall {
  uint32 sockfd = 1;
  bytes data = 2;
  string address = 3;
  uint32 flags = 4;
}

message RecvFromCall {
  uint32 sockfd = 1;
  uint32 size = 2;
  uint32 flags = 3;
}

message CloseSocketCall {
  uint32 sockfd = 1;
}

message SetSockOptCall {
  uint32 sockfd = 1;
  uint32 level = 2;
  uint32 optname = 3;
  bytes optval = 4;
}

message GetSockOptCall {
  uint32 sockfd = 1;
  uint32 level = 2;
  uint32 optname = 3;
}

// ============================================================================
// File Descriptor Calls
// ============================================================================

message OpenCall {
  string path = 1;
  uint32 flags = 2;
  uint32 mode = 3;
}

message CloseCall {
  uint32 fd = 1;
}

message DupCall {
  uint32 fd = 1;
}

message Dup2Call {
  uint32 oldfd = 1;
  uint32 newfd = 2;
}

message LseekCall {
  uint32 fd = 1;
  int64 offset = 2;
  uint32 whence = 3;
}

message FcntlCall {
  uint32 fd = 1;
  uint32 cmd = 2;
  uint32 arg = 3;
}

// ============================================================================
// IPC Calls - Pipes
// ============================================================================

message CreatePipeCall {
  uint32 reader_pid = 1;
  uint32 writer_pid = 2;
  optional uint32 capacity = 3;
}

message WritePipeCall {
  uint32 pipe_id = 1;
  bytes data = 2;
}

message ReadPipeCall {
  uint32 pipe_id = 1;
  uint32 size = 2;
}

message ClosePipeCall {
  uint32 pipe_id = 1;
}

message DestroyPipeCall {
  uint32 pipe_id = 1;
}

message PipeStatsCall {
  uint32 pipe_id = 1;
}

// ============================================================================
// IPC Calls - Shared Memory
// ============================================================================

message CreateShmCall {
  uint32 size = 1;
}

message AttachShmCall {
  uint32 segment_id = 1;
  bool read_only = 2;
}

message DetachShmCall {
  uint32 segment_id = 1;
}

message WriteShmCall {
  uint32 segment_id = 1;
  uint32 offset = 2;
  bytes data = 3;
}

message ReadShmCall {
  uint32 segment_id = 1;
  uint32 offset = 2;
  uint32 size = 3;
}

message DestroyShmCall {
  uint32 segment_id = 1;
}

message ShmStatsCall {
  uint32 segment_id = 1;
}

// ============================================================================
// IPC Calls - Memory-Mapped Files
// ============================================================================

message MmapCall {
  string path = 1;
  uint32 offset = 2;
  uint32 length = 3;
  uint32 prot = 4;  // Protection flags: READ=1, WRITE=2, EXEC=4
  bool shared = 5;  // true=Shared, false=Private
}

message MmapReadCall {
  uint32 mmap_id = 1;
  uint32 offset = 2;
  uint32 length = 3;
}

message MmapWriteCall {
  uint32 mmap_id = 1;
  uint32 offset = 2;
  bytes data = 3;
}

message MsyncCall {
  uint32 mmap_id = 1;
}

message MunmapCall {
  uint32 mmap_id = 1;
}

message MmapStatsCall {
  uint32 mmap_id = 1;
}

// ============================================================================
// IPC Calls - Async Queues
// ============================================================================

message CreateQueueCall {
  string queue_type = 1; // "fifo", "priority", "pubsub"
  optional uint32 capacity = 2;
}

message SendQueueCall {
  uint32 queue_id = 1;
  bytes data = 2;
  optional uint32 priority = 3;
}

message ReceiveQueueCall {
  uint32 queue_id = 1;
}

message SubscribeQueueCall {
  uint32 queue_id = 1;
}

message UnsubscribeQueueCall {
  uint32 queue_id = 1;
}

message CloseQueueCall {
  uint32 queue_id = 1;
}

message DestroyQueueCall {
  uint32 queue_id = 1;
}

message QueueStatsCall {
  uint32 queue_id = 1;
}

// ============================================================================
// Scheduler Calls
// ============================================================================

message ScheduleNextCall {}

message YieldProcessCall {}

message GetCurrentScheduledCall {}

message GetSchedulerStatsCall {}

message SetSchedulingPolicyCall {
  string policy = 1; // "round_robin", "priority", "fair"
}

message GetSchedulingPolicyCall {}

message SetTimeQuantumCall {
  uint64 quantum_micros = 1;
}

message GetTimeQuantumCall {}

message GetProcessSchedulerStatsCall {
  uint32 target_pid = 1;
}

message GetAllProcessSchedulerStatsCall {}

message BoostPriorityCall {
  uint32 target_pid = 1;
}

message LowerPriorityCall {
  uint32 target_pid = 1;
}

// ============================================================================
// Process Management
// ============================================================================

message CreateProcessRequest {
  string name = 1;
  uint32 priority = 2;
  SandboxLevel sandbox_level = 3;
  optional string command = 4;
  repeated string args = 5;
  repeated string env_vars = 6;
}

message CreateProcessResponse {
  uint32 pid = 1;
  bool success = 2;
  string error = 3;
  optional uint32 os_pid = 4;
}

enum SandboxLevel {
  MINIMAL = 0;
  STANDARD = 1;
  PRIVILEGED = 2;
}

// ============================================================================
// Sandbox Management
// ============================================================================

message UpdateSandboxRequest {
  uint32 pid = 1;
  repeated Capability capabilities = 2;
  repeated string allowed_paths = 3;
  repeated string blocked_paths = 4;
  ResourceLimits limits = 5;
}

message UpdateSandboxResponse {
  bool success = 1;
  string error = 2;
}

enum Capability {
  READ_FILE = 0;
  WRITE_FILE = 1;
  CREATE_FILE = 2;
  DELETE_FILE = 3;
  LIST_DIRECTORY = 4;
  SPAWN_PROCESS = 5;
  KILL_PROCESS = 6;
  NETWORK_ACCESS = 7;
  BIND_PORT = 8;
  SYSTEM_INFO = 9;
  TIME_ACCESS = 10;
  SEND_MESSAGE = 11;
  RECEIVE_MESSAGE = 12;
}

message ResourceLimits {
  uint64 max_memory_bytes = 1;
  uint64 max_cpu_time_ms = 2;
  uint32 max_file_descriptors = 3;
  uint32 max_processes = 4;
  uint32 max_network_connections = 5;
}

// ============================================================================
// Event Streaming (for future use)
// ============================================================================

message EventStreamRequest {
  repeated string event_types = 1;
}

message KernelEvent {
  uint64 timestamp = 1;
  oneof event {
    ProcessCreatedEvent process_created = 10;
    ProcessTerminatedEvent process_terminated = 11;
    SyscallExecutedEvent syscall_executed = 12;
    PermissionDeniedEvent permission_denied = 13;
  }
}

message ProcessCreatedEvent {
  uint32 pid = 1;
  string name = 2;
}

message ProcessTerminatedEvent {
  uint32 pid = 1;
  int32 exit_code = 2;
}

message SyscallExecutedEvent {
  uint32 pid = 1;
  string syscall_type = 2;
  bool success = 3;
}

message PermissionDeniedEvent {
  uint32 pid = 1;
  string syscall_type = 2;
  string reason = 3;
}

// ============================================================================
// Scheduler Service Messages
// ============================================================================

message ScheduleNextRequest {}

message ScheduleNextResponse {
  bool success = 1;
  optional uint32 next_pid = 2;
  string error = 3;
}

message GetSchedulerStatsRequest {}

message GetSchedulerStatsResponse {
  bool success = 1;
  SchedulerStats stats = 2;
  string error = 3;
}

message SchedulerStats {
  uint64 total_scheduled = 1;
  uint64 context_switches = 2;
  uint64 preemptions = 3;
  uint32 active_processes = 4;
  string policy = 5;
  uint64 quantum_micros = 6;
}

message SetSchedulingPolicyRequest {
  string policy = 1; // "RoundRobin", "Priority", or "Fair"
}

message SetSchedulingPolicyResponse {
  bool success = 1;
  string error = 2;
}

// ============================================================================
// Streaming Syscall Messages
// ============================================================================

message StreamSyscallRequest {
  uint32 pid = 1;
  oneof request {
    StreamFileRead read = 2;
    StreamFileWrite write = 3;
  }
}

message StreamFileRead {
  string path = 1;
  uint32 chunk_size = 2;  // bytes per chunk, default 64KB
}

message StreamFileWrite {
  string path = 1;
  bytes chunk = 2;
  bool finish = 3;  // true on last chunk
}

message StreamSyscallChunk {
  oneof chunk {
    bytes data = 1;
    string error = 2;
    StreamComplete complete = 3;
  }
}

message StreamComplete {
  uint64 total_bytes = 1;
}

// ============================================================================
// Async Syscall Messages
// ============================================================================

message AsyncSyscallResponse {
  string task_id = 1;
  bool accepted = 2;
  string error = 3;
}

message AsyncStatusRequest {
  string task_id = 1;
}

message AsyncStatusResponse {
  enum Status {
    PENDING = 0;
    RUNNING = 1;
    COMPLETED = 2;
    FAILED = 3;
    CANCELLED = 4;
  }
  Status status = 1;
  SyscallResponse result = 2;
  float progress = 3;  // 0.0 to 1.0
}

message AsyncCancelRequest {
  string task_id = 1;
}

message AsyncCancelResponse {
  bool cancelled = 1;
  string error = 2;
}

// ============================================================================
// Batch Syscall Messages
// ============================================================================

message BatchSyscallRequest {
  repeated SyscallRequest requests = 1;
  bool parallel = 2;  // execute in parallel if true
}

message BatchSyscallResponse {
  repeated SyscallResponse responses = 1;
  uint32 success_count = 2;
  uint32 failure_count = 3;
}

// ============================================================================
// io_uring-style Async Syscall Completion Messages
// ============================================================================

message ReapCompletionsRequest {
  uint32 pid = 1;
  uint32 max_completions = 2;  // 0 means all
}

message ReapCompletionsResponse {
  repeated IoUringCompletion completions = 1;
  uint32 count = 2;
}

message IoUringCompletion {
  uint64 seq = 1;  // Sequence number
  uint64 user_data = 2;  // User-provided correlation data
  SyscallResponse result = 3;  // Result of the operation
}

message IoUringBatchResponse {
  repeated uint64 sequences = 1;  // Assigned sequence numbers
  bool accepted = 2;
  string error = 3;
}

