/**
 * ID Generation Utilities
 *
 * Frontend-only ID generation for UI state and temporary identifiers.
 * These IDs are NOT used for backend persistence (backend generates its own UUIDs).
 *
 * Use cases:
 * - Component keys in dynamic lists
 * - Temporary note IDs before backend sync
 * - Client-side state identifiers
 * - Draft/unsaved content tracking
 */

/**
 * Generates a timestamp-based ID with random suffix
 * Format: {timestamp}-{random}
 * Example: "1704924123456-a7f3"
 */
export function generateTimestampId(): string {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 6);
  return `${timestamp}-${random}`;
}

/**
 * Generates a short random ID
 * Format: 8 character alphanumeric string
 * Example: "x4k9m2p1"
 *
 * NOTE: Not cryptographically secure - use only for UI identifiers
 */
export function generateShortId(): string {
  return Math.random().toString(36).substring(2, 10);
}

/**
 * Generates a UUID v4 (random)
 * Uses crypto.randomUUID() if available, falls back to polyfill
 *
 * Format: "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
 * Example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
 */
export function generateUUID(): string {
  // Use native crypto.randomUUID if available (modern browsers)
  if (typeof crypto !== "undefined" && crypto.randomUUID) {
    return crypto.randomUUID();
  }

  // Fallback polyfill for older browsers
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

/**
 * Generates a prefixed ID
 * Useful for namespacing IDs by type
 *
 * @param prefix - Identifier prefix (e.g., "note", "task", "comment")
 * @param useUUID - If true, uses UUID format; otherwise uses timestamp format
 *
 * Examples:
 * - generatePrefixedId("note") => "note-1704924123456-a7f3"
 * - generatePrefixedId("task", true) => "task-f47ac10b-58cc-4372-a567-0e02b2c3d479"
 */
export function generatePrefixedId(prefix: string, useUUID = false): string {
  const id = useUUID ? generateUUID() : generateTimestampId();
  return `${prefix}-${id}`;
}

/**
 * Generates a sequential ID with counter
 * Useful for ordered lists where relative order matters
 *
 * @param prefix - Identifier prefix
 * @param counter - Sequential counter value
 *
 * Example: generateSequentialId("item", 5) => "item-00005"
 */
export function generateSequentialId(prefix: string, counter: number): string {
  const paddedCounter = counter.toString().padStart(5, "0");
  return `${prefix}-${paddedCounter}`;
}

/**
 * Extracts timestamp from a timestamp-based ID
 * Returns null if ID doesn't match expected format
 *
 * @param id - ID generated by generateTimestampId or generatePrefixedId
 */
export function extractTimestamp(id: string): number | null {
  // Try to extract timestamp from formats:
  // - "1704924123456-a7f3"
  // - "note-1704924123456-a7f3"

  const parts = id.split("-");
  const timestampPart = parts.length === 2 ? parts[0] : parts[1];

  if (!timestampPart) return null;

  const timestamp = parseInt(timestampPart, 10);
  return isNaN(timestamp) ? null : timestamp;
}

/**
 * Validates if a string is a valid UUID v4
 */
export function isValidUUID(id: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(id);
}

/**
 * ID Generator class for managing sequential IDs
 * Useful when you need consistent sequential numbering
 */
export class IDGenerator {
  private counters: Map<string, number> = new Map();

  /**
   * Get next sequential ID for a prefix
   */
  next(prefix: string): string {
    const current = this.counters.get(prefix) ?? 0;
    const next = current + 1;
    this.counters.set(prefix, next);
    return generateSequentialId(prefix, next);
  }

  /**
   * Reset counter for a prefix
   */
  reset(prefix: string): void {
    this.counters.set(prefix, 0);
  }

  /**
   * Get current counter value without incrementing
   */
  current(prefix: string): number {
    return this.counters.get(prefix) ?? 0;
  }

  /**
   * Set counter to specific value
   */
  set(prefix: string, value: number): void {
    this.counters.set(prefix, value);
  }
}

/**
 * Default ID generator instance
 * Use this for consistent sequential numbering across your app
 */
export const defaultIDGenerator = new IDGenerator();
